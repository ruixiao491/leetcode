////My solution: precompute + set
class Solution {
public:
    int maximumSwap(int num) {
        int ans=0;
        vector<int> nums;
        while(num>0)
        {
            nums.push_back(num%10);
            num=num/10;
        }//while
        reverse(nums.begin(),nums.end());
        int n=nums.size();
        vector<int> maxindex(n,n-1);
        set<int> special;
        for(int i=n-2;i>=0;i--)
        {
            if(nums[i]>nums[maxindex[i+1]])
            {
                maxindex[i]=i;
            }
            else
            {
                if(nums[i]==nums[maxindex[i+1]])
                {
                    special.insert(i);
                }
                maxindex[i]=maxindex[i+1]; 
            }//else
        }//for
        for(int i=0;i<n-1;i++)
        {
            if(maxindex[i]!=i&&special.find(i)==special.end())
            {
                swap(nums[i],nums[maxindex[i]]);
                break;
            }
        }//for
        for(int i=0;i<n;i++)
        {
            ans=ans*10+nums[i];
        }
        return ans;       
    }
};

###########################################
The solution in the solution part: Greedy
###########################################
class Solution {
public:
    int maximumSwap(int num) {
        string s=to_string(num);
        int n=s.size();
        vector<int> last(10);
        for(int i=0;i<n;i++)
        {
            last[s[i]-'0']=i;
        }//for i
        for(int i=0;i<n;i++)
        {
            for(int j=9;j>s[i]-'0';j--)
            {
                if(last[j]>i)
                {
                    swap(s[i],s[last[j]]);
                    return stoi(s);
                }
            }
        }//for i
        return num;
    }
};
