///My solution: backtracking + set
class Solution {
public:
    set<string> seen;
    vector<string> removeInvalidParentheses(string s) {
        vector<string> ans;
        auto counts=minoperations(s);
        int left=counts.first;
        int right=counts.second;
        if(left==0&&right==0)
        {
            ans.push_back(s);
            return ans;
        }
        else if(left+right==s.size())
        {
            ans.push_back("");
            return ans;
        }
        helper(s,0,left,right);
        auto it=seen.begin();
        while(it!=seen.end())
        {
            ans.push_back(*it);
            it++;
        }//while
        return ans;
    }//removeInvalidParentheses
    pair<int,int> minoperations(string s)
    {
        int Left=0, Right=0;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='(')
            {
                Left++;
            }
            else if(s[i]==')')
            {
                if(Left>0)
                {
                    Left--;
                }
                else
                {
                    Right++;
                }
            }
        }//for
        return {Left,Right};
    }//minoperations
    void helper(string s, int start, int left, int right)
    {
        if(left==0&&right==0)
        {
            if(check(s))
            {
                seen.insert(s);
            }
            return;
        }//if
        for(int i=start;i<s.size();i++)
        {
            if(left>0&&s[i]=='(')
            {
                helper(s.substr(0,i)+s.substr(i+1),i,left-1,right);
            }//if
            if(right>0&&s[i]==')')
            {
                helper(s.substr(0,i)+s.substr(i+1),i,left,right-1);
            }
            
        }//for i
        
        
    }//helper
    
    bool check(string s)
    {
        int count=0;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='(')
            {
                count++;
            }
            else if(s[i]==')')
            {
                if(count>0)
                {
                    count--;
                }
                else
                {
                    return false;
                }
            }
        }//for i
        return count==0;
    }//check
};




##################################################
The solution in the solution part: backtracking
##################################################
class Solution {
public:
    vector<string> res;
    vector<string> removeInvalidParentheses(string s) {
        int lremove = 0;
        int rremove = 0;

        for (char c : s) {
            if (c == '(') {
                lremove++;
            } else if (c == ')') {
                if (lremove == 0) {
                    rremove++;
                } else {
                    lremove--;
                }
            }
        }
        helper(s, 0, lremove, rremove);
        return res;
    }

    void helper(string str, int start, int lremove, int rremove) {
        if (lremove == 0 && rremove == 0) {
            if (isValid(str)) {
                res.push_back(str);
            }
            return;
        }
        for (int i = start; i < str.size(); i++) {
            if (i != start && str[i] == str[i - 1]) {
                continue;
            }
            // 如果剩余的字符无法满足去掉的数量要求，直接返回
            if (lremove + rremove > str.size() - i) {
                return;
            } 
            // 尝试去掉一个左括号
            if (lremove > 0 && str[i] == '(') {
                helper(str.substr(0, i) + str.substr(i + 1), i, lremove - 1, rremove);
            }
            // 尝试去掉一个右括号
            if (rremove > 0 && str[i] == ')') {
                helper(str.substr(0, i) + str.substr(i + 1), i, lremove, rremove - 1);
            }
        }
    }

    inline bool isValid(const string & str) {
        int cnt = 0;

        for (int i = 0; i < str.size(); i++) {
            if (str[i] == '(') {
                cnt++;
            } else if (str[i] == ')') {
                cnt--;
                if (cnt < 0) {
                    return false;
                }
            }
        }

        return cnt == 0;
    }
};

