///My solution: BFS
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        return dfs(root,0);
        
    }
    int dfs(TreeNode* root, int sum)
    {
        if(root==nullptr)
        {
            return 0;
        }
        sum=sum*10+root->val;
        if(root->left==nullptr&&root->right==nullptr)
        {
            return sum;
        }
        else
        {
            return dfs(root->left,sum)+dfs(root->right,sum);
        }
    }
};

######################################
The solution in the solution part: DFS
######################################
class Solution {
public:
    int dfs(TreeNode* root, int prevSum) {
        if (root == nullptr) {
            return 0;
        }
        int sum = prevSum * 10 + root->val;
        if (root->left == nullptr && root->right == nullptr) {
            return sum;
        } else {
            return dfs(root->left, sum) + dfs(root->right, sum);
        }
    }
    int sumNumbers(TreeNode* root) {
        return dfs(root, 0);
    }
};

