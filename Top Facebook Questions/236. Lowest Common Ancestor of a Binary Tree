///My solution:
class Solution {
public:
    map<TreeNode*,TreeNode*> seen;
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        queue<TreeNode*> que;
        que.push(root);
        int count=0;
        while(!que.empty())
        {
            TreeNode* cur=que.front();
            if(cur==p||cur==q)
            {
                count++;
                if(count==2)
                {
                    break;
                }
            }
            que.pop();
            if(cur->left!=nullptr)
            {
                seen[cur->left]=cur;
                que.push(cur->left);
            }
            if(cur->right!=nullptr)
            {
                seen[cur->right]=cur;
                que.push(cur->right);
            }
        }//while
        
        vector<TreeNode*> parents1=parents(p);
        vector<TreeNode*> parents2=parents(q);
        int p1=parents1.size()-1;
        int p2=parents2.size()-1;
        //std::cout<<parents1.size()<<" "<<parents2.size()<<std::endl;
        
        while(p1>=0&&p2>=0&&parents1[p1]==parents2[p2])
        {
            //std::cout<<parents1[p1]->val<<" "<<parents2[p2]->val<<" "<<p1<<std::endl;
            p1--;
            p2--;
        }//while
        p1++;
        return parents1[p1];
    }
    vector<TreeNode*> parents(TreeNode* a)
    {
        vector<TreeNode*> ans;
        while(a!=nullptr)
        {
            //std::cout<<a->val<<std::endl;
            ans.push_back(a);
            a=seen[a];
        }//while
        return ans;
    }//parents
};


##############################################
The solution in the solution part: recursive
##############################################
class Solution {
public:
    TreeNode* ans;
    bool dfs(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == nullptr) return false;
        bool lson = dfs(root->left, p, q);
        bool rson = dfs(root->right, p, q);
        if ((lson && rson) || ((root->val == p->val || root->val == q->val) && (lson || rson))) {
            ans = root;
        } 
        return lson || rson || (root->val == p->val || root->val == q->val);
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        dfs(root, p, q);
        return ans;
    }
};

###################################################
The solution in the solution part: similar to mine
###################################################
class Solution {
public:
    unordered_map<int, TreeNode*> fa;
    unordered_map<int, bool> vis;
    void dfs(TreeNode* root){
        if (root->left != nullptr) {
            fa[root->left->val] = root;
            dfs(root->left);
        }
        if (root->right != nullptr) {
            fa[root->right->val] = root;
            dfs(root->right);
        }
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        fa[root->val] = nullptr;
        dfs(root);
        while (p != nullptr) {
            vis[p->val] = true;
            p = fa[p->val];
        }
        while (q != nullptr) {
            if (vis[q->val]) return q;
            q = fa[q->val];
        }
        return nullptr;
    }
};

