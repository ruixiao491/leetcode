////My solution:
class Solution {
public:
    vector<int> findBuildings(vector<int>& heights) {
        vector<int> ans;
        int n=heights.size();
        ans.push_back(n-1);
        int maxval=heights[n-1];
        for(int i=n-2;i>=0;i--)
        {
            if(heights[i]>maxval)
            {
                maxval=heights[i];
                ans.push_back(i);
            }//if
            
            
        }//for i
        sort(ans.begin(),ans.end());
        return ans;
        
        
    }
};


####################################################
The solution in the solution part: Linear Iteration 
####################################################
class Solution {
public:
    vector<int> findBuildings(vector<int>& heights) {
        int n = heights.size();
        vector<int> answer;
        
        for (int current = 0; current < n; ++current) {
            // If the current building is taller, 
            // it will block the shorter building's ocean view to its left.
            // So we pop all the shorter buildings that have been added before.
            while (!answer.empty() && heights[answer.back()] <= heights[current]) {
                answer.pop_back();
            }
            answer.push_back(current);
        }
        
        return answer;
    }
};

###################################################
The solution in the solution part: Monotonic Stack
###################################################
class Solution {
public:
    vector<int> findBuildings(vector<int>& heights) {
        int n = heights.size();
        vector<int> answer;
        stack<int> st;
        
        for (int current = n - 1; current >= 0; --current) {
            // If the building to the right is smaller, we can pop it.
            while (!st.empty() && heights[st.top()] < heights[current]) {
                st.pop();
            }
            
            // If the stack is empty, it means there is no building to the right 
            // that can block the view of the current building.
            if (st.size() == 0) { 
                answer.push_back(current);
            }
            
            // Push the current building in the stack.
            st.push(current);
        }
        
        reverse(answer.begin(), answer.end());
        return answer;
    }
};

#################################
