///My solution: Binary search
class Solution {
public:
    int missingElement(vector<int>& nums, int k) {
        int n=nums.size();
        int right=nums[n-1]+k;
        int left=nums[0]+k;
        while(left<right)
        {
            int mid=(left+right)/2;
            //std::cout<<left<<" "<<right<<" "<<mid<<" "<<count(nums,mid)<<std::endl;
            if(count(nums,mid)<k)
            {
                left=mid+1;
            }
            else if(count(nums,mid)>k)
            {
                right=mid-1;
            }
            else
            {
                right=mid;
            }
        }//while
        return right;
        
    }
    int count(vector<int>& nums, int val)
    {
        int ans=0;
        auto it=lower_bound(nums.begin(),nums.end(),val);
        if(it<nums.end())
        {
            if(*it!=val)
            {
                ans=(val-nums[0]+1-(it-nums.begin()));
            }
            else
            {
                ans=(val-nums[0]+1-(it-nums.begin()+1));
            }
        }//if
        else
        {
            ans=(val-nums[0]+1-nums.size());
        }
        
        return ans;
    }
};


#################################################
The solution in the solution part: Binary search 
#################################################
class Solution {
public:
    int missingElement(vector<int>& nums, int k) {
        int n=nums.size();
        if(k>count(n-1,nums))
        {
            return nums[n-1]+k-count(n-1,nums);
        }
        int left=0, right=n-1;
        while(left<right)
        {
            int mid=(left+right)/2;
            if(count(mid,nums)<k)
            {
                left=mid+1;
            }
            else
            {
                right=mid;
            }
        }//while
        return nums[left-1]+k-count(left-1,nums);
        
        
    }//missingElement
    int count(int idx, vector<int>& nums)
    {
        return nums[idx]-nums[0]-idx;
    }//count
    
};
