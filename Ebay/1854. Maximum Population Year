//My solution:
class Solution {
public:
    int maximumPopulation(vector<vector<int>>& logs) {
        vector<int> birth;
        vector<int> death;
        for(int i=0;i<logs.size();i++)
        {
            birth.push_back(logs[i][0]);
            death.push_back(logs[i][1]);
        }//for i
        sort(birth.begin(),birth.end());
        sort(death.begin(),death.end());
        int num=0;
        int maxval=0;
        int year=0;
        int start=0;
        for(int i=0;i<birth.size();i++)
        {
            while(i<birth.size()&&birth[i]<death[start])
            {
                num++;
                i++;
            }
            if(num>maxval)
            {
                year=birth[i-1];
                maxval=num;
            }
            if(i<birth.size()&&birth[i]==death[start])
            {
                start++;
            }
            else
            {
                num++;
            }
            while(i<birth.size()&&start<birth.size()&&birth[i]>death[start])
            {
                num--;
                start++;
            }
            
        }//for i
        return year;
        
    }
};


#########################################################
The solution in the solution part: similar to prefix sum
#######class Solution {
private:
    static constexpr int offset = 1950;   // 起始年份与起始下标之差
    
public:
    int maximumPopulation(vector<vector<int>>& logs) {
        vector<int> delta(101, 0);   // 变化量
        for (auto&& log: logs) {
            ++delta[log[0]-offset];
            --delta[log[1]-offset];
        }
        int mx = 0;   // 人口数量最大值
        int res = 0;   // 最大值对应的最小下标
        int curr = 0;   // 每一年的人口数量
        // 前缀和
        for (int i = 0; i < 101; ++i){
            curr += delta[i];
            if (curr > mx){
                mx = curr;
                res = i;
            }
        }
        return res + offset;   // 转回对应的年份
    }
};


