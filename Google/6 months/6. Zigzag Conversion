///My solution:
class Solution {
public:
    string convert(string s, int numRows) {
        if(numRows==1)
        {
            return s;
        }
        string ans="";
        int start=0;
        int flag=0;
        vector<vector<char>> s1(numRows);
        for(int i=0;i<s.size();i++)
        {
            s1[start].push_back(s[i]);
            if(start==numRows-1)
            {
                flag=1;
            }
            else if(start==0)
            {
                flag=0;
            }
            if(flag==0)
            {
                start++;
            }
            else
            {
                start--;
            }
        }
        for(int i=0;i<numRows;i++)
        {
            for(int j=0;j<s1[i].size();j++)
            {
                ans.push_back(s1[i][j]);
            }//for j
        }//for i
        return ans;
        
        
    }
};


################################################
The solution in the solution part: visit by row
################################################
class Solution {
public:
    string convert(string s, int numRows) {
        int n = s.length(), r = numRows;
        if (r == 1 || r >= n) {
            return s;
        }
        string ans;
        int t = r * 2 - 2;
        for (int i = 0; i < r; ++i) { // 枚举矩阵的行
            for (int j = 0; j + i < n; j += t) { // 枚举每个周期的起始下标
                ans += s[j + i]; // 当前周期的第一个字符
                if (0 < i && i < r - 1 && j + t - i < n) {
                    ans += s[j + t - i]; // 当前周期的第二个字符
                }
            }
        }
        return ans;
    }
};

