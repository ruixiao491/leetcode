///My solution:
class Solution {
public:
    string frequencySort(string s) {
        string ans="";
        map<char,int> seen;
        multimap<int,char> counts;
        for(int i=0;i<s.size();i++)
        {
            seen[s[i]]++;
        }//for
        for(auto it=seen.begin();it!=seen.end();it++)
        {
            counts.insert({it->second,it->first});
        }//for
        auto it2=counts.begin();
        for(auto it2=counts.begin();it2!=counts.end();it2++)
        {
            for(int i=0;i<it2->first;i++)
            {
                ans.push_back(it2->second);
            }//for
        }//for
        reverse(ans.begin(),ans.end());        
        return ans;        
    }
};

#########################################################
The first solution in the solution part (map+vector sort)
#########################################################
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> mp;
        int length = s.length();
        for (auto &ch : s) {
            mp[ch]++;
        }
        vector<pair<char, int>> vec;
        for (auto &it : mp) {
            vec.emplace_back(it);
        }
        sort(vec.begin(), vec.end(), [](const pair<char, int> &a, const pair<char, int> &b) {
            return a.second > b.second;
        });
        string ret;
        for (auto &[ch, num] : vec) {
            for (int i = 0; i < num; i++) {
                ret.push_back(ch);
            }
        }
        return ret;
    }
};

###################################################
The solution in the solution part (map+bucket sort)
###################################################
class Solution {
public:
    string frequencySort(string s) {
        unordered_map<char, int> mp;
        int maxFreq = 0;
        int length = s.size();
        for (auto &ch : s) {
            maxFreq = max(maxFreq, ++mp[ch]);
        }
        vector<string> buckets(maxFreq + 1);
        for (auto &[ch, num] : mp) {
            buckets[num].push_back(ch);
        }
        string ret;
        for (int i = maxFreq; i > 0; i--) {
            string &bucket = buckets[i];
            for (auto &ch : bucket) {
                for (int k = 0; k < i; k++) {
                    ret.push_back(ch);
                }
            }
        }
        return ret;
    }
};
