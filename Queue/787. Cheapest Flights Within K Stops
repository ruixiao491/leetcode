///My solution: BFS
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        int ans=INT_MAX;
        vector<vector<pair<int,int>>> edges(n);
        for(int i=0;i<flights.size();i++)
        {
            edges[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }//for
        
        queue<int> city;
        map<pair<int,int>,int> prices;
        city.push(src);
        prices.insert({{src,0},0});
        int stop=0;
        while(!city.empty()&&stop<=k)
        {
            int length=city.size();
            for(int i=0;i<length;i++)
            {
                int cur=city.front();
                city.pop();
                for(int j=0;j<edges[cur].size();j++)
                {
                    if(stop==k&&edges[cur][j].first!=dst) continue;
                    if(prices.find({edges[cur][j].first,stop+1})==prices.end())
                    {
                        prices.insert({{edges[cur][j].first,stop+1},INT_MAX});
                    }//if
                    if(prices[{edges[cur][j].first,stop+1}]>prices[{cur,stop}]+edges[cur][j].second)
                    {
                        prices[{edges[cur][j].first,stop+1}]=prices[{cur,stop}]+edges[cur][j].second;
                        city.push(edges[cur][j].first);
                        if(edges[cur][j].first==dst)
                        {
                            ans=min(ans,prices[{edges[cur][j].first,stop+1}]);
                        }
                    }//if >
                    
                }//for j
                
            }//for i  
            stop++;
            
        }//while
        
        return ans==INT_MAX? -1: ans;
    }
};

###############################################################################################
The solution in the solution part: modified Dijkstra's Algorithm (Time Complexity: O(V2â‹…log V))
###############################################################################################
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> edges(n);
        for(int i=0;i<flights.size();i++)
        {
            edges[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }//for
        auto cmp=[](const vector<int>& a, const vector<int>& b)
        {
            return a[1]>b[1];
        };
        priority_queue<vector<int>, vector<vector<int>>,decltype(cmp)> que(cmp);
        vector<int> prices(n,INT_MAX);
        vector<int> stops(n,INT_MAX);
        que.push({src,0,0});
        while(!que.empty())
        {
            vector<int> it=que.top();
            que.pop();
            int node=it[0], stop=it[2], cost=it[1];
            if(node==dst)
            {
                return cost;
            }
            if(stop==k+1) continue;
            for(int i=0;i<edges[node].size();i++)
            {
                if(cost+edges[node][i].second<prices[edges[node][i].first])
                {
                    que.push({edges[node][i].first,cost+edges[node][i].second,stop+1});
                    prices[edges[node][i].first]=cost+edges[node][i].second;
                    stops[edges[node][i].first]=stop+1;
                }
                else if(stop+1<stops[edges[node][i].first])
                {
                    que.push({edges[node][i].first,cost+edges[node][i].second,stop+1});
                }
            }//for i
        }//while
        return prices[dst]==INT_MAX? -1:prices[dst];
    }
};






##################################################################################################################################################################################################
The solution in the solution part: dynamic programming (Bellman-Ford) Time Complexity: o(kE) since we have \text{K}+1K+1 iterations and in each iteration, we go over all the edges in the graph.
##################################################################################################################################################################################################
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        static constexpr int INF=10000*101+1;
        vector<vector<int>> f(k+2,vector<int>(n,INF));
        f[0][src]=0;
        for(int t=1;t<k+2;t++)
        {
            for(int j=0;j<flights.size();j++)
            {
                int prev=flights[j][0], i=flights[j][1], cost=flights[j][2];
                f[t][i]=min(f[t][i],f[t-1][prev]+cost);
            }//for j
        }//for i
        int ans=INF;
        for(int t=1;t<k+2;t++)
        {
            ans=min(ans,f[t][dst]);
        }
        return ans==INF?-1:ans;
        
        
    }
};

###############################################
Optimized the space complexity of Bellman Ford
###############################################
class Solution {
private:
    static constexpr int INF = 10000 * 101 + 1;

public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<int> f(n, INF);
        f[src] = 0;
        int ans = INF;
        for (int t = 1; t <= k + 1; ++t) {
            vector<int> g(n, INF);
            for (auto&& flight: flights) {
                int j = flight[0], i = flight[1], cost = flight[2];
                g[i] = min(g[i], f[j] + cost);
            }
            f = move(g);
            ans = min(ans, f[dst]);
        }
        return (ans == INF ? -1 : ans);
    }
};
