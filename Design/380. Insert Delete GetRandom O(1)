class RandomizedSet {
public:
    map<int,int> seen;
    vector<int> nums;
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        if(seen.count(val)==0)
        {
            seen.insert({val,(int) nums.size()});
            nums.push_back(val);
            return true;
        }
        else
        {
            return false;
        }
        
    }
    
    bool remove(int val) {
        if(seen.count(val)==1)
        {
            if(nums.size()>1)
            {
                int index=seen[val];
                int last=nums.back();
                nums[index]=last;
                seen[last]=index;           
            }
            nums.pop_back();
            seen.erase(val);
            
            return true;
        }
        else
        {
            return false;
        }
        
    }
    
    int getRandom() {
        //std::cout<<nums.size()<<std::endl;
        int index=random()%nums.size();
        return nums[index];
        
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
