class NumMatrix {
public:
    vector<vector<int>> nums;
    vector<vector<int>> sum;
    int m, n;
    NumMatrix(vector<vector<int>>& matrix) {
        nums=matrix;
        m=matrix.size();
        n=matrix[0].size();
        sum=vector(m,vector<int>(n,0));
        sum[0][0]=nums[0][0];
        for(int i=1;i<n;i++)
        {
            sum[0][i]=sum[0][i-1]+nums[0][i];
        }
        for(int i=1;i<m;i++)
        {
            sum[i][0]=sum[i-1][0]+nums[i][0];
        }
        
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                sum[i][j]=sum[i][j-1]+sum[i-1][j]-sum[i-1][j-1]+nums[i][j];
            }
        }//for i
        
        
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int ans=0;
        ans=sum[row2][col2];
        //std::cout<<ans<<std::endl;
        if(row1-1>=0)
        {
            ans=ans-sum[row1-1][col2];
        }
        if(col1-1>=0)
        {
            ans=ans-sum[row2][col1-1];
        }
        if(row1-1>=0&&col1-1>=0)
        {
            ans=ans+sum[row1-1][col1-1];
        }
        return ans;
        
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
