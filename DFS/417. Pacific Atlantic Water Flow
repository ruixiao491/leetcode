///My solution: BFS
class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m=heights.size();
        int n=heights[0].size();
        set<pair<int,int>> seen;
        vector<vector<int>> dir={{0,1},{0,-1},{-1,0},{1,0}};
        vector<vector<int>> visited_pac(m,vector<int>(n,0));
        vector<vector<int>> visited_atl(m,vector<int>(n,0));
        vector<vector<int>> ans;
        queue<pair<int,int>> que_pac;
        queue<pair<int,int>> que_atl;
        for(int i=0;i<n;i++)
        {
            que_pac.push({0,i});
            visited_pac[0][i]=1;
            que_atl.push({m-1,i});
            visited_atl[m-1][i]=1;
        }
        for(int i=1;i<m;i++)
        {
            que_pac.push({i,0});
            visited_pac[i][0]=1;
            que_atl.push({m-1-i,n-1});
            visited_atl[m-1-i][n-1]=1;
        }
        
        while(!que_pac.empty())
        {
            auto it=que_pac.front();
            que_pac.pop();
            seen.insert(it);
            for(int i=0;i<4;i++)
            {
                int new_row=it.first+dir[i][0];
                int new_col=it.second+dir[i][1];
                if(new_row>=0&&new_row<m&&new_col>=0&&new_col<n&&heights[new_row][new_col]>=heights[it.first][it.second]&&visited_pac[new_row][new_col]==0)
                {
                    que_pac.push({new_row,new_col});
                    visited_pac[new_row][new_col]=1;
                }//if
            }//for
        }//while
        
        while(!que_atl.empty())
        {
            auto it=que_atl.front();
            que_atl.pop();
            if(seen.find({it.first,it.second})!=seen.end())
            {
                ans.push_back({it.first,it.second});
            }
            for(int i=0;i<4;i++)
            {
                int new_row=it.first+dir[i][0];
                int new_col=it.second+dir[i][1];
                if(new_row>=0&&new_row<m&&new_col>=0&&new_col<n&&heights[new_row][new_col]>=heights[it.first][it.second]&&visited_atl[new_row][new_col]==0)
                {
                    que_atl.push({new_row,new_col});
                    visited_atl[new_row][new_col]=1;
                }//if
            }//for i
        }//while
        return ans;
        
        
    }
};



########################################
The solution in the solution part: DFS
########################################
static const int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

class Solution {
public:
    vector<vector<int>> heights;

    void dfs(int row, int col, vector<vector<bool>> & ocean) {
        int m = ocean.size();
        int n = ocean[0].size();
        if (ocean[row][col]) {
            return;
        }
        ocean[row][col] = true;
        for (int i = 0; i < 4; i++) {
            int newRow = row + dirs[i][0], newCol = col + dirs[i][1];
            if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && heights[newRow][newCol] >= heights[row][col]) {
                dfs(newRow, newCol, ocean);
            }
        }
    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        this->heights = heights;
        int m = heights.size();
        int n = heights[0].size();
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));

        for (int i = 0; i < m; i++) {
            dfs(i, 0, pacific);
        }
        for (int j = 1; j < n; j++) {
            dfs(0, j, pacific);
        }
        for (int i = 0; i < m; i++) {
            dfs(i, n - 1, atlantic);
        }
        for (int j = 0; j < n - 1; j++) {
            dfs(m - 1, j, atlantic);
        }
        vector<vector<int>> result;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    vector<int> cell;
                    cell.emplace_back(i);
                    cell.emplace_back(j);
                    result.emplace_back(cell);
                }
            }
        }
        return result;
    }
};
