//My solution:
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> connect(m*n);
        stack<int> stk;
        set<int> seen;
        int ans=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    int index=i*n+j;
                    if(j-1>=0&&grid[i][j-1]==1)
                    { 
                        connect[index].push_back(i*n+j-1);
                    }//if
                    if(j+1<n&&grid[i][j+1]==1)
                    {
                        connect[index].push_back(i*n+j+1);
                    }
                    if(i-1>=0&&grid[i-1][j]==1)
                    {
                        connect[index].push_back((i-1)*n+j);
                    }
                    if(i+1<m&&grid[i+1][j]==1)
                    {
                        connect[index].push_back((i+1)*n+j);
                    }
                }//if                
            }//for j
        }//for i
        int start=0;
        while(grid[start/n][start%n]==0)
        {
            start++;
        }
        //std::cout<<start<<std::endl;
        stk.push(start);
        while(!stk.empty())
        {
            int cur=stk.top();
            stk.pop();
            if(seen.count(cur))
            {
                ans=ans-2;
                continue;
            }
            seen.insert(cur);
            if(seen.size()>1)
            {
                ans=ans-2;    
            }
            //std::cout<<cur<<"   "<<connect[cur].size()<<std::endl;
            for(int i=0;i<connect[cur].size();i++)
            {
                //std::cout<<cur<<"    "<<connect[cur][i]<<std::endl;
                if(seen.count(connect[cur][i])==0)
                {
                    stk.push(connect[cur][i]);
                }//if          
            }//for i
        }//while
        ans=seen.size()*4+ans;
        return ans; 
        
    }
};


##################################################
The solution in the solution part: simple counting
##################################################
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int ans=0;
        int up, down, left, right;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    up=0, down=0, left=0, right=0;
                    if(i>0)
                    {
                        up=grid[i-1][j];
                    }
                    if(i+1<m)
                    {
                        down=grid[i+1][j];
                    }
                    if(j>0)
                    {
                        left=grid[i][j-1];
                    }
                    if(j+1<n)
                    {
                        right=grid[i][j+1];
                    }
                    //std::cout<<up+left+right+down<<std::endl;
                    ans=ans+4-(up+left+right+down);
                }//if grid[i][j]==1
            }//for j
        }//for i
        return ans;
        
    }
};

#################################################################
////The solution in the solution part: only check left and up
#################################################################
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int ans=0;
        int up,left;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    up=0, left=0;
                    if(i>0)
                    {
                        up=grid[i-1][j];
                    }
                    if(j>0)
                    {
                        left=grid[i][j-1];
                    }
                    ans=ans+4-(up+left)*2;
                }//if grid[i][j]==1
            }//for j
        }//for i
        return ans;
        
    }
};
