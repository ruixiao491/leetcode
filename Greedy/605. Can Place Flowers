///My solution:
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        if(n==0)
        {
            return true;
        }
        for(int i=0;i<flowerbed.size();i++)
        {
            if(flowerbed[i]==1)
            {
                if(i+1<flowerbed.size()&&flowerbed[i+1]==0)
                {
                    flowerbed[i+1]=2;
                    
                }
                if(i-1>=0&&flowerbed[i-1]==0)
                {
                    flowerbed[i-1]=2;
                    
                }
            }//if
        }//for 
        int a=0;
        for(int i=0;i<flowerbed.size();i++)
        {
            if(flowerbed[i]==0)
            {
                flowerbed[i]=2;
                a++;
                if(a==n)
                {
                    return true;
                }
                if(i+1<flowerbed.size()&&flowerbed[i+1]==0)
                {
                    flowerbed[i+1]=2;
                }
            }
            
        }
        return false;        
    }
};

##########################################################################################
The solution in the solution part: (Greedy) one transverse (much more optimized than mine)
##########################################################################################

class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int count=0;
        for(int i=0;i<flowerbed.size();i++)
        {
            if(flowerbed[i]==0)
            {
                bool emptyLeft=(i==0)||(flowerbed[i-1]==0);
                bool emptyRight=(i==flowerbed.size()-1)||(flowerbed[i+1]==0);
                if(emptyLeft&&emptyRight)
                {
                    flowerbed[i]=1;
                    count++;
                }
            }//if==0
        }//for i
        return count>=n;
    }
};
