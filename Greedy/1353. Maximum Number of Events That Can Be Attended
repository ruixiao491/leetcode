###########################################
The solution in the solution part: Greedy
###########################################
class Solution {
public:
    #define N 100010
    int maxEvents(vector<vector<int>>& events) {
        vector<int>in[N], out[N];
        int mx=0, cnt=0;
        for(int i=0;i<events.size();i++)
        {
            int l=events[i][0], r=events[i][1];
            mx=max(mx,r);
            in[l].push_back(cnt);
            out[r+1].push_back(cnt);
            cnt++;
        }//for i
        int ans=0;
        multiset<pair<int,int>> seen;
        for(int i=1;i<=mx;i++)
        {
            for(int j=0;i<in[i].size();j++)
            {
                int num=in[i][j];
                std::cout<<events[num][1]<<" "<<num<<std::endl;
                seen.insert({events[num][1],num});
            }//for j
            for(auto x:out[i])
            {
                auto it=seen.find({events[x][1],x});
                if(it!=seen.end())
                {
                    seen.erase(it);
                }//if
            }//for auto
            if(!seen.empty())
            {
                seen.erase(seen.begin());
                ans++;
            }//if
            
        }//for i
        return ans;
    }
};



#############################################
The solution of others: map + priority queue
#############################################
class Solution {
public:
    int maxEvents(vector<vector<int>>& events) {
        // 记录不同起始天对应的结束时间
        int maxDay = 0;
        unordered_map<int, vector<int>> umap;
        for (auto& event : events) {
            if (event[1] > maxDay) maxDay = event[1];
            umap[event[0]].emplace_back(event[1]);
        }
        //
        int cnt;
        priority_queue<int, vector<int>, greater<>> pri_que;
        for (int i = 1; i <= maxDay; ++i) {
            while (!pri_que.empty() && pri_que.top() < i) pri_que.pop();
            for (int s : umap[i]) {
                pri_que.push(s);
            }
            if (!pri_que.empty()) {
                ++cnt;
                pri_que.pop();
            }
        }
        return cnt;
    }
};


