class Solution {
public:
    string longestDiverseString(int a, int b, int c) {
        string ans="";
        priority_queue<pair<int,char>> que;
        if(a!=0)
        {
            que.push({a,'a'});
        }
        if(b!=0)
        {
            que.push({b,'b'});
        }
        if(c!=0)
        {
            que.push({c,'c'});
        }
        while(que.size()>1)
        {
            auto it=que.top();
            que.pop();
            auto it2=que.top();
            que.pop();
            int count1=it.first;
            int count2=it2.first;
            char test1=it.second;
            char test2=it2.second;
            if(count1>=count2+2)
            {
                ans.push_back(test1);
                ans.push_back(test1);
                ans.push_back(test2);
                count1-=2;
                count2--;
            }
            else
            {
                ans.push_back(test1);
                ans.push_back(test2);
                count1--;
                count2--;
            }
            if(count1>0)
            {
                que.push({count1,test1});
            }
            if(count2>0)
            {
                que.push({count2,test2});
            }
        }//while
        if(que.size()==1)
        {
            int num=min(que.top().first,2);
            char test=que.top().second;
            while(num>0)
            {
                ans.push_back(test);
                num--;
            }
        }
        
        return ans;
    }
};
