///My solution: BFS
class Solution {
public:
    int goodNodes(TreeNode* root) {
        queue<pair<TreeNode*, int>> que;
        que.push({root,root->val});
        int count=0;
        while(!que.empty())
        {
            auto it=que.front();
            que.pop();
            if(it.first->val==it.second)
            {
                count++;
            }
            if(it.first->left!=nullptr)
            {
                que.push({it.first->left,max(it.second,it.first->left->val)});
            }
            if(it.first->right!=nullptr)
            {
                que.push({it.first->right,max(it.second,it.first->right->val)});
            }
            
        }//while
        return count;
    }
};


#######################################
The solution in the solution part: DFS
#######################################
class Solution {
public:
    int count;
    int goodNodes(TreeNode* root) {
        count=0;
        dfs(root,INT_MIN);
        return count;
        
        
    }//goodNodes
    void dfs(TreeNode* node, int maxVal)
    {
        if(maxVal<=node->val)
        {
            count++;
        }
        if(node->left!=nullptr)
        {
            dfs(node->left,max(maxVal,node->val));
        }
        if(node->right!=nullptr)
        {
            dfs(node->right,max(maxVal, node->val));
        }
        
    }//dfs
};
