//My solution:
class Solution {
public:
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        if(root->left==nullptr&&root->right==nullptr)
        {
            return {root->val};
        }
        vector<int> Left;
        vector<int> Right;
        Left.push_back(root->val);
        if(root->left!=nullptr)
        {
            TreeNode* cur=root->left;
            while(cur->left!=nullptr||cur->right!=nullptr)
            {
                Left.push_back(cur->val);
                if(cur->left!=nullptr)
                {     
                    cur=cur->left;
                }
                else
                {
                    cur=cur->right;
                }
            }//while
        }//if
        
        
        if(root->right!=nullptr)
        {
            TreeNode* cur=root->right;
            while(cur->left!=nullptr||cur->right!=nullptr)
            {
                Right.push_back(cur->val);
                if(cur->right!=nullptr)
                {
                    cur=cur->right;
                }
                else
                {
                    cur=cur->left;
                }
            }//while
        }//if
        
        
        stack<TreeNode*> stk;
        stk.push(root);
        while(!stk.empty())
        {
            TreeNode* cur=stk.top();
            stk.pop();
            if(cur->left==nullptr&&cur->right==nullptr)
            {
               Left.push_back(cur->val); 
            }
            if(cur->right!=nullptr)
            {
                stk.push(cur->right);
            }
            if(cur->left!=nullptr)
            {
                stk.push(cur->left);
            }
        }//while
        for(int i=Right.size()-1;i>=0;i--)
        {
            Left.push_back(Right[i]);
        }
        return Left;
        
    }
    
};
