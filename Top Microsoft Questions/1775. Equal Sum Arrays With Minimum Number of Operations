///My solution:  Greedy
class Solution {
public:
    int minOperations(vector<int>& nums1, vector<int>& nums2) {
        int n1=nums1.size();
        int n2=nums2.size();
        if(!(n1<=n2*6&&n2<=n1*6))
        {
            return -1;
        }//if
        int sum1=0;
        int sum2=0;
        for(int i=0;i<n1;i++)
        {
            sum1+=nums1[i];
        }
        for(int i=0;i<n2;i++)
        {
            sum2+=nums2[i];
        }
        if(sum1==sum2)
        {
            return 0;
        }
        if(sum2<sum1)
        {
            vector<int> temp=nums1;
            nums1=nums2;
            nums2=temp;
            swap(sum2,sum1);
        }
        int diff=abs(sum2-sum1);
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        int i1=0, i2=nums2.size()-1;
        int ans=0;
        while(i1<nums1.size()&&i2>=0&&diff>0)
        {
            //std::cout<<diff<<std::endl;
            if(nums2[i2]-1>=6-nums1[i1])
            {
                diff-=nums2[i2]-1;
                i2--;
                ans++;
            }
            else
            {
                diff-=6-nums1[i1];
                i1++;
                ans++;
            }
        }//while
        
        while(i1<nums1.size()&&diff>0)
        {
            diff-=6-nums1[i1];
            i1++;
            ans++;
        }
        
        while(i2<nums2.size()&&diff>0)
        {
            diff-=nums2[i2]-1;
            i2--;
            ans++;
        }
        return ans;
       
        
    }

};




#################################################
The solution of others: greedy (similar)
class Solution {
public:
    int minOperations(vector<int>& a, vector<int>& b) {
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        int sa = accumulate(a.begin(), a.end(), 0);
        int sb = accumulate(b.begin(), b.end(), 0);
        if (sa > sb) swap(sa, sb), swap(a, b);
        int i = 0, j = b.size() - 1;
        int cnt = 0;
        while (i < a.size() && 0 <= j && sa < sb) {
            if (6 - a[i] > b[j] - 1) { // 选择变化差值最大的一边
                sa += 6 - a[i++];
            } else sb -= b[j--] - 1;
            ++cnt;
        }
        while (i < a.size() && sa < sb) {
            sa += 6 - a[i++];
            ++cnt;
        }
        while (0 <= j && sa < sb) {
            sb -= b[j--] - 1;
            ++cnt;
        }
        return sa >= sb ? cnt : -1;
    }
};

