//My solution
class Solution {
public:
    int compress(vector<char>& chars) {
        int count=1;
        char prev=chars[0];
        for(int i=1;i<chars.size();i++)
        {
            if(chars[i]==prev)
            {
                count++;
                chars.erase(chars.begin()+i);
                i--;
                if(i==chars.size()-1)
                {
                    if(count>1)
                    {   
                        while(count>0)
                        {
                            chars.insert(chars.begin()+i+1,count%10+'0');
                            count=count/10; 
                        }//while
                    }//if
                    break;
                }//if
                    
            }//if
            else
            {
                int length=0;
                if(count>1)
                {   
                    while(count>0)
                    {
                        chars.insert(chars.begin()+i,count%10+'0');
                        count=count/10; 
                        length++;
                    }//while
                }//if
                prev=chars[i+length];
                count=1;
                i=i+length;
            }//else     
        }//for i
        return chars.size();
    }
};

###############################################
The solution in the solution part: two pointers
###############################################
class Solution {
public:
    int compress(vector<char>& chars) {
        int n = chars.size();
        int write = 0, left = 0;
        for (int read = 0; read < n; read++) {
            if (read == n - 1 || chars[read] != chars[read + 1]) {
                chars[write++] = chars[read];
                int num = read - left + 1;
                if (num > 1) {
                    int anchor = write;
                    while (num > 0) {
                        chars[write++] = num % 10 + '0';
                        num /= 10;
                    }
                    reverse(chars.begin()+anchor, chars.begin()+write);
                }
                left = read + 1;
            }
        }
        return write;
    }
};
