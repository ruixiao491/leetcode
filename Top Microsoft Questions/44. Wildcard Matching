///My solution: dynamic programming
class Solution {
public:
    bool isMatch(string s, string p) {
        int m=s.size();
        int n=p.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        auto matches=[&](int i, int j)
        {
            if(i==0)
            {
                return false;
            }
            if(p[j-1]=='?')
            {
                return true;
            }
            return s[i-1]==p[j-1];
        };//auto
        dp[0][0]=1;
        for(int i=0;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(p[j-1]=='*')
                {
                    if(j==1)
                    {
                        dp[i][j]=1;
                    }
                    else
                    {
                            for(int k=0;k<=i;k++)
                            {
                                dp[i][j]|=dp[k][j-1];
                            }
                            
                    }
                }//if *
                else
                {
                    if(matches(i,j))
                    {
                        dp[i][j]|=dp[i-1][j-1];
                    }
                }
                //std::cout<<i<<" "<<j<<" "<<dp[i][j]<<std::endl;
            }//for j
        }//for i
        return dp[m][n];
        
    }
};


#######################################################################
The solution in the solution part: dynamic programming (more optimized)
#######################################################################
class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.size();
        int n = p.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1));
        dp[0][0] = true;
        for (int i = 1; i <= n; ++i) {
            if (p[i - 1] == '*') {
                dp[0][i] = true;
            }
            else {
                break;
            }
        }
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (p[j - 1] == '*') {
                    dp[i][j] = dp[i][j - 1] | dp[i - 1][j];
                }
                else if (p[j - 1] == '?' || s[i - 1] == p[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
        return dp[m][n];
    }
};

