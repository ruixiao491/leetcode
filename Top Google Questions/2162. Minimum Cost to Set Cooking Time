class Solution {
public:
    int minCostSetTime(int startAt, int moveCost, int pushCost, int targetSeconds) {
        int min=targetSeconds/60;
        int sec=targetSeconds%60;
        int ans1=INT_MAX;
        int ans2=INT_MAX;
        vector<int> time;
        vector<int> time2;
        
        if(min>99)
        {
            ans1=INT_MAX;
        }
        else
        {
            if(min>0)
            {
                if(min/10>0)
                {
                    time.push_back(min/10);
                }
                time.push_back(min%10);
                time.push_back(sec/10);
                time.push_back(sec%10);
            }//if
            else
            {
                if(sec/10>0)
                {
                    time.push_back(sec/10);
                }
                time.push_back(sec%10);
            }//else
        
        ans1=cost(startAt, moveCost, pushCost,time);
            //std::cout<<ans1<<std::endl;
        }//else

        
        if(sec+60<=99)
        {
            min=min-1;
            sec=sec+60;
            if(min>0)
            {
                if(min/10>0)
                {
                    time2.push_back(min/10);
                }
                time2.push_back(min%10);
                time2.push_back(sec/10);
                time2.push_back(sec%10);
                ans2=cost(startAt, moveCost, pushCost, time2);
            }//if
            else if(min==0)
            {
                if(sec/10>0)
                {
                    time2.push_back(sec/10);
                }
                time2.push_back(sec%10);
                ans2=cost(startAt, moveCost, pushCost, time2);
            }//else
            //std::cout<<ans2<<std::endl;
            
        }//if
        else
        {
            ans2=INT_MAX;
        }
        return ans1<=ans2 ? ans1:ans2 ;
        
    }
    int cost(int startAt, int moveCost, int pushCost, vector<int> time)
    {
        int ans=0;
        int start=startAt;
        for(int i=0;i<time.size();i++)
        {
            if(start!=time[i])
            {
                ans+=moveCost;
            }
            ans+=pushCost;
            start=time[i];
        }//for
        return ans;
    }//cost
};


###################################################################
The solution in the solution part: same idea, but better than mine
###################################################################
class Solution {
public:
    int minCostSetTime(int startAt, int moveCost, int pushCost, int targetSeconds) {
        // 给定输入的最小花费
        auto cost = [&](int m, int s) -> int {
            if (m < 0 || m > 99 || s < 0 || s > 99) {
                // 输入不合法
                return INT_MAX;
            }
            vector<int> digits = {m / 10, m % 10, s / 10, s % 10};
            // 寻找起始位
            int start = 0;
            while (start < 4 && digits[start] == 0) {
                ++start;
            }
            
            int res = 0;   // 最小花费
            int prev = startAt;
            for (int i = start; i < 4; ++i) {
                int d = digits[i];
                if (d != prev) {
                    // 此时需要先移动再输入
                    prev = d;
                    res += moveCost;
                }
                res += pushCost;
            }
            return res;
        };
        
        int mm = targetSeconds / 60, ss = targetSeconds % 60;
        return min(cost(mm, ss), cost(mm - 1, ss + 60));   // 两种可能方案的较小值
    }
};

