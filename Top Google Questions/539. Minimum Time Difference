///My solution:

class Solution {
public:
    int findMinDifference(vector<string>& timePoints) {
        vector<int> time;
        int ans=INT_MAX;
        for(int i=0;i<timePoints.size();i++)
        {
            int min=stoi(timePoints[i].substr(0,2))*60+stoi(timePoints[i].substr(3,2));
            time.push_back(min);
        }//for i
        sort(time.begin(),time.end());
        for(int i=1;i<time.size();i++)
        {
            ans=min(ans,abs(time[i]-time[i-1]));
            if(ans==0)
            {
                return ans;
            }
        }
        ans=min(ans,abs(time[time.size()-1]-time[0]-1440));
        
        return ans;
        
    }
};

#################################################################
The solution in the solution part: optimized the above code a bit
#################################################################
class Solution {
    int getMinutes(string &t) {
        return (int(t[0] - '0') * 10 + int(t[1] - '0')) * 60 + int(t[3] - '0') * 10 + int(t[4] - '0');
    }

public:
    int findMinDifference(vector<string> &timePoints) {
        int n = timePoints.size();
        if (n > 1440) {
            return 0;
        }
        sort(timePoints.begin(), timePoints.end());
        int ans = INT_MAX;
        int t0Minutes = getMinutes(timePoints[0]);
        int preMinutes = t0Minutes;
        for (int i = 1; i < n; ++i) {
            int minutes = getMinutes(timePoints[i]);
            ans = min(ans, minutes - preMinutes); // 相邻时间的时间差
            preMinutes = minutes;
        }
        ans = min(ans, t0Minutes + 1440 - preMinutes); // 首尾时间的时间差
        return ans;
    }
};

