///My solution:
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        vector<int> room;
        room.push_back(intervals[0][1]);
        for(int i=1;i<intervals.size();i++)
        {
            int flag=0;
            for(int j=0;j<room.size();j++)
            {
                if(room[j]<=intervals[i][0])
                {
                    room[j]=intervals[i][1];
                    flag=1;
                    break;
                }
            }//for j
            if(flag==0)
            {
                room.push_back(intervals[i][1]);
            }//if
            
        }//for i
        return room.size();      
    }
};

#####################################################
///The solution in the solution part: priority queue
#####################################################
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        sort(intervals.begin(),intervals.end());
        priority_queue<int,vector<int>,greater<int>> que;
        que.push(intervals[0][1]);
        for(int i=1;i<intervals.size();i++)
        {
            if(intervals[i][0]>=que.top())
            {
                que.pop();
            }
            que.push(intervals[i][1]);
        }//for i
        return que.size();
        
    }
};


##########################################################
The solution in the solution part: chronological ordering
##########################################################
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        vector<int> start;
        vector<int> endtime;
        int ans=0;
        for(int i=0;i<intervals.size();i++)
        {
            start.push_back(intervals[i][0]);
            endtime.push_back(intervals[i][1]);
        }
        sort(start.begin(),start.end());
        sort(endtime.begin(),endtime.end());
        int sp=0, ep=0;
        while(sp<start.size())
        {
            if(start[sp]>=endtime[ep])
            {
                ans--;
                ep++;
            }
            ans++;
            sp++;
        }//while
        return ans;
    }
};
