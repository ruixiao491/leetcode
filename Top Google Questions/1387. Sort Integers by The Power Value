///My solution: custom sort
class Solution {
public:
    int getKth(int lo, int hi, int k) {
        vector<int> nums;
        for(int i=lo;i<=hi;i++)
        {
            nums.push_back(i);
        }//for
        auto cmp=[&](int a, int b)
        {
            return steps(a)<steps(b);
        };//cmp
        stable_sort(nums.begin(),nums.end(),cmp);
        return nums[k-1];
    }
    int steps(int a)
    {
        int ans=0;
        while(a!=1)
        {
            if(a%2==0)
            {
                a=a/2;
            }
            else
            {
                a=3*a+1;
            }
            ans++;
        }//while
        return ans;
    }//steps
    
};



############################################################
The solution in the solution part: similar idea (recursive)
############################################################
class Solution {
public:
    int getF(int x) {
        if (x == 1) return 0;
        if (x & 1) return getF(x * 3 + 1) + 1;
        else return getF(x / 2) + 1;
    }

    int getKth(int lo, int hi, int k) {
        vector <int> v;
        for (int i = lo; i <= hi; ++i) v.push_back(i);
        sort(v.begin(), v.end(), [&] (int u, int v) {
            if (getF(u) != getF(v)) return getF(u) < getF(v);
            else return u < v;
        });
        return v[k - 1];
    }
};


########################################################
The solution in the solution part: custom sort with map
########################################################
class Solution {
public:
    unordered_map <int, int> f;

    int getF(int x) {
        if (f.find(x) != f.end()) return f[x];
        if (x == 1) return f[x] = 0;
        if (x & 1) return f[x] = getF(x * 3 + 1) + 1;
        else return f[x] = getF(x / 2) + 1;
    }

    int getKth(int lo, int hi, int k) {
        vector <int> v;
        for (int i = lo; i <= hi; ++i) v.push_back(i);
        sort(v.begin(), v.end(), [&] (int u, int v) {
            if (getF(u) != getF(v)) return getF(u) < getF(v);
            else return u < v;
        });
        return v[k - 1];
    }
};

