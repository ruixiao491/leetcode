///My solution inspired by the hints:
class Solution {
public:
    int shortestWay(string source, string target) {
        set<char> seen_source;
        int ans=0;
        for(int i=0;i<source.size();i++)
        {
            seen_source.insert(source[i]);
        }//for i
        for(int i=0;i<target.size();i++)
        {
            if(seen_source.find(target[i])==seen_source.end())
            {
                return -1;
            }
        }//for i
        string test=source;
        while(target.size()>0)
        {
            if(test.size()>0&&target[0]==test[0])
            {
                test.erase(0,1);
                target.erase(0,1);
                if(target.size()==0)
                {
                    ans++;
                }
            }//if
            else if(test.size()>0&&target[0]!=test[0])
            {
                test.erase(0,1);
            }
            else if(test.size()==0)
            {
                ans++;
                test=source;
            }
        }//while      
        return ans;       
    }
};

####################################
The solutions of others: 2 pointers
####################################
class Solution {
public:
    int shortestWay(string source, string target) {
        int sp = 0, tp = 0, ans = 1;
        int sn = source.size(), tn = target.size();
        while(tp < tn){
            while(sp < sn && source[sp] != target[tp]) ++sp;
            if(sp == sn) {
                sp = 0;
                ++ans;
                while(sp < sn && source[sp] != target[tp]) ++sp;
                if(sp == sn) return -1;
            }
            ++sp, ++tp;
        }
        return ans;
    }
};


######################################
The solution of others: binary search
######################################
class Solution {
public:
    int shortestWay(string source, string target) {
        vector<int> cnt[26];
        int sp = 0, ans = 1;
        const int sn = source.size(), tn = target.size();
        for(int i = 0; i < sn; ++i){
            cnt[source[i]-'a'].push_back(i);
        }
        for(int c: target){
            c -= 'a';
            auto&& p = cnt[c];
            if(p.size() == 0) return -1;
            if(p.back() < sp) sp = 0, ++ans;
            sp = *lower_bound(begin(p), end(p), sp) + 1;
        }
        return ans;
    }
};


