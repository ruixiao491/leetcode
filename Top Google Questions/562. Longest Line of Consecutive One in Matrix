class Solution {
public:
    int m,n;
    int longestLine(vector<vector<int>>& mat) {
        m=mat.size();
        n=mat[0].size();
        vector<vector<int>> dir={{1,0},{0,1},{1,1},{1,-1}};
        int ans=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(mat[i][j]==0) continue;
                for(int k=0;k<4;k++)
                {
                    int length=1;
                    dfs(mat,dir,k,length,i,j);
                    //std::cout<<i<<" "<<j<<" "<<k<<" "<<length<<std::endl;
                    ans=max(ans,length);
                }//for k
            }//for j
        }//for i
        return ans;
    }
    void dfs(vector<vector<int>>& mat,vector<vector<int>>& dir,int index,int &length,int row, int col)
    {
        int new_row=row+dir[index][0];
        int new_col=col+dir[index][1];
        if(new_row>=0&&new_row<m&&new_col>=0&&new_col<n&&mat[new_row][new_col]==1)
        {
            length++;
            dfs(mat,dir,index,length,new_row,new_col);
        }
    }//dfs
};


#######################################################
The solution in the solution part: dynamic programming
#######################################################
class Solution {
public:
    int longestLine(vector<vector<int>>& mat) {
        int ans=0;
        int m=mat.size();
        int n=mat[0].size();
        vector<vector<int>> horizontal(m,vector<int>(n,0));
        vector<vector<int>> vertical(m,vector<int>(n,0));
        vector<vector<int>> diagonal(m,vector<int>(n,0));
        vector<vector<int>> antidiagonal(m,vector<int>(n,0));
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(mat[i][j]==0) continue;
                else
                {
                    horizontal[i][j]=j>0? horizontal[i][j-1]+1:1;
                    vertical[i][j]=i>0? vertical[i-1][j]+1:1;
                    diagonal[i][j]=i>0&&j>0? diagonal[i-1][j-1]+1:1;
                    antidiagonal[i][j]=i>0&&j<n-1? antidiagonal[i-1][j+1]+1:1;
                    ans=max(ans,horizontal[i][j]);
                    ans=max(ans,vertical[i][j]);
                    ans=max(ans,diagonal[i][j]);
                    ans=max(ans,antidiagonal[i][j]);
                }//else
            }//for j
        }//for i
        return ans;     
        
    }
};

###############################################
The solution in the solution part: Brute Force
###############################################
class Solution {
    int overflow(vector<vector<int>>& M, int i, int j) {
        return i < 0 || j < 0 || i >= M.size() or j >= M[0].size();
    }
    int count(vector<vector<int>>& M, int i, int j, int direction_i, int direction_j) {
        int ans = 0, cur = 0;
        while (!overflow(M, i, j)) {
            if (M[i][j]) {
                ++cur;
                ans = max(ans, cur);
            } else {
                cur = 0;
            }
            i += direction_i;
            j += direction_j;
        }
        return ans;
    }
public:
    int longestLine(vector<vector<int>>& M) {
        if (M.size() == 0)
            return 0;
        int ans = 0;
        for (int i = 0; i != M.size(); ++i) {
            // 左边界为起点，向右
            ans = max(ans, count(M, i, 0, 0, 1));
            // 左边界为起点，向右下
            ans = max(ans, count(M, i, 0, 1, 1));
            // 右边界为起点，向左下
            ans = max(ans, count(M, i, M[0].size() - 1, 1, -1));
        }
        for (int j = 0; j != M[0].size(); ++j) {
            // 上边界为起点，向下
            ans = max(ans, count(M, 0, j, 1, 0));
            // 上边界为起点，向右下
            ans = max(ans, count(M, 0, j, 1, 1));
            // 上边界为起点，向左下
            ans = max(ans, count(M, 0, j, 1, -1));
        }
        return ans;
    }
};


