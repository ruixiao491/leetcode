class DetectSquares {
public:
    map<pair<int,int>,int> seen;
    vector<vector<int>> nums;
    DetectSquares() {
        
    }
    
    void add(vector<int> point) {
        seen[{point[0],point[1]}]++;
        if(seen[{point[0],point[1]}]==1)
        {
            nums.push_back(point);       
        }
        
        
    }
    
    int count(vector<int> point) {
        int ans=0;
        int x1=point[0];
        int y1=point[1];
        //std::cout<<nums.size()<<std::endl;
        for(int i=0;i<nums.size();i++)
        {
            int x=nums[i][0];
            int y=nums[i][1];
            //std::cout<<x<<" "<<y<<endl;;
            if(x==x1||y==y1) continue;
            if(abs(x-x1)!=abs(y-y1)) continue;
            if(seen.find({x,y1})!=seen.end()&&seen.find({x1,y})!=seen.end())
            {
                //std::cout<<x<<x1<<"  "<<y1<<std::endl;
                ans+=seen[{x,y}]*seen[{x,y1}]*seen[{x1,y}];
                
            }//if
        }//for
        return ans;
        
    }
};
