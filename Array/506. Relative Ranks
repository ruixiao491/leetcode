////My solution:
class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& score) {
        map<int,int> seen;
        vector<string> ans(score.size());
        for(int i=0;i<score.size();i++)
        {
            seen.insert({score[i],i});
        }//for
        auto it=seen.begin();
        int index=score.size();
        while(it!=seen.end())
        {
            if(index==1)
            {
                ans[it->second]="Gold Medal";
            }
            else if(index==2)
            {
                ans[it->second]="Silver Medal";
            }
            else if(index==3)
            {
                ans[it->second]="Bronze Medal";
            }
            else
            {
                ans[it->second]=to_string(index);
            }
            it++;
            index--;
            
        }//while
        return ans;
        
    }
};


################################################
The solution in the solution part: vector sort
################################################

class Solution {
public:
    vector<string> findRelativeRanks(vector<int>& score) {
        int n = score.size();
        string desc[3] = {"Gold Medal", "Silver Medal", "Bronze Medal"};
        vector<pair<int, int>> arr;

        for (int i = 0; i < n; ++i) {
            arr.emplace_back(make_pair(-score[i], i));
        }
        sort(arr.begin(), arr.end());
        vector<string> ans(n);
        for (int i = 0; i < n; ++i) {
            if (i >= 3) {
                ans[arr[i].second] = to_string(i + 1);
            } else {
                ans[arr[i].second] = desc[i];
            }
        }
        return ans;
    }
};
