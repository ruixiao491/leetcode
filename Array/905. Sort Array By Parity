//my solution
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        vector<int> even;
        vector<int> odd;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]%2==0)
            {
                even.push_back(nums[i]);
            }
            else
            {
                odd.push_back(nums[i]);
            }
        }//for i
        even.insert(even.end(),odd.begin(),odd.end());
        return even;
        
    }
};


//My solution
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int n=nums.size();
        int left=0, right=n-1;
        while(left<right)
        {
            if(nums[left]%2>nums[right]%2)
            {
                swap(nums[left],nums[right]);
            }//if
            if(nums[right]%2==1)
            {
                right--;
            }
            if(nums[left]%2==0)
            {
                left++;
            }
        }//while
        return nums;
    }
};


#################################################
The solution in the solution part: sort by parity
#################################################
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        auto cmp=[](const int& a, const int& b){
            return a%2<b%2;
        };
        sort(nums.begin(),nums.end(),cmp);
        return nums;
    }
};
