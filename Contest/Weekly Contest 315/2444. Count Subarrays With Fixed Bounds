########################################
The solution of others: sliding window
########################################
long long countSubarrays(vector<int>& A, int minK, int maxK) {
        long res = 0, j = 0, jmin = -1, jmax = -1, n = A.size();
        for (int i = 0; i < n; ++i) {
            if  (A[i] < minK || A[i] > maxK) {
                jmin = jmax = -1;
                j = i + 1;
            }
            if (A[i] == minK) jmin = i;
            if (A[i] == maxK) jmax = i;
            res += max(0L, min(jmin, jmax) - j + 1);
        }
        return res;
    }
    
    
    
    
#####################################################    
We maintain a maximum sliding window
with alll elements in range [minK, maxK],
j is the index of leftmost element of the subarray.
i is the index of rightmost element of the subarray.

And we record the index jmin and jmax, where:
jmin is index of last seen A[jmin] = mink
jmax is index of last seen A[jmax] = maxk

Itearte the A[i],
if A[i] == minK, update jmin = i
if A[i] == maxK, update jmax = i

If A[i] not in range of [minK, maxK],
A[i] cannnot be in the subarray,
update j = i + 1.

In the end of each iteration,
the subarray ends at A[i]
the starting element of the subarray,
can be choosen in interval [j, min(jmin, jmax)]
There are min(jmin, jmax) - j + 1 choices,
so we update res += max(0, min(jmin, jmax) - j + 1).
#####################################################
