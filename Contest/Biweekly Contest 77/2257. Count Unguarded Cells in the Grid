class Solution {
public:
    int countUnguarded(int m, int n, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>> board(m,vector<int>(n,0));
        map<int,int> column;
        map<int,int> row;
        int ans=0;
        vector<vector<int>> dir={{-1,0},{1,0},{0,-1},{0,1}};
        for(int i=0;i<guards.size();i++)
        {
            board[guards[i][0]][guards[i][1]]=2;//2 for guard;
        }//for guard
        for(int i=0;i<walls.size();i++)
        {
            board[walls[i][0]][walls[i][1]]=3;//3 for wall;
            
        }
        for(int i=0;i<guards.size();i++)
        {
            for(int j=0;j<4;j++)
            {
                int x=guards[i][0]+dir[j][0];
                int y=guards[i][1]+dir[j][1];
                //if(x>=0&&x<m&&y>=0&&y<n&&board[x][y]==1) continue;
                while(x>=0&&x<m&&y>=0&&y<n&&board[x][y]!=3&&board[x][y]!=2)
                {
                    if(board[x][y]==0)
                    {
                       board[x][y]=1; 
                    }  
                    x=x+dir[j][0];
                    y=y+dir[j][1];
                }//while
            }//for j
            
            
        }//for i
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(board[i][j]==0)
                {
                    ans++;
                }
            }
        }
        return ans;
        
    }
};
