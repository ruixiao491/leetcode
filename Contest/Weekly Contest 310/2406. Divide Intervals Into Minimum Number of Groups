////Priority queue
class Solution {
public:
    int minGroups(vector<vector<int>>& intervals) {
        int n=intervals.size();
        if(n==1) return 1;
        sort(intervals.begin(),intervals.end());
        int ans=0;
        priority_queue<int,vector<int>,greater<int>> que;
        for(int i=0;i<n;i++)
        {
            if(que.empty()||que.top()>=intervals[i][0])
            {
                que.push(intervals[i][1]);
                ans++;
            }
            else
            {
                que.pop();
                que.push(intervals[i][1]);      
            }
        }//for i

        return ans;
        
    }
};

##############
Line sweeping
##############
class Solution {
public:

int minGroups(vector<vector<int>>& intervals) {
    vector<int> sweep(1e7+1,0);
    int val=0;
    for(int i=0;i<intervals.size();i++){
        int l=intervals[i][0], r=intervals[i][1];
        sweep[l]++, sweep[r+1]--;
        val=max(val,r);
    }
    
    int grps=1;
    for(int i=1;i<val+1;i++){
        sweep[i] += sweep[i-1];
        grps = max(grps,sweep[i]); // keeping track of maximum number of groups present at any instant
    }
    return grps;
}
};
