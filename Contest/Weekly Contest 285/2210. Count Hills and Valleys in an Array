////My solution
class Solution {
public:
    int countHillValley(vector<int>& nums) {
        int ans=0;
        for(int i=1;i<nums.size()-1;i++)
        {
            if(nums[i]==nums[i-1]) continue;
            for(int j=i+1;j<nums.size();j++)
            {
                if(nums[j]==nums[i])
                {
                    continue;
                }
                if((nums[i]>nums[i-1])!=(nums[i]>nums[j]))
                {
                    break;
                }
                if((nums[i]>nums[i-1])==(nums[i]>nums[j]))
                {
                    ans++;
                    break;
                }
                
            }//for j
        }//for i
        return ans;
        
    }
};


#########################################################
The solution of others (time complexity better than mine)
#########################################################
class Solution {
public:
    int countHillValley(vector<int>& nums) {
        vector<int> v;
        for (int x : nums)
            if (v.empty() or v.back() != x) v.push_back(x);
        int res = 0;
        for (int i = 1; i + 1 < v.size(); i += 1) {
            res += (v[i] - v[i - 1]) * (v[i] - v[i + 1]) > 0;
        }
        return res;
    }
};
