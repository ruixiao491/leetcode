class Solution {
public:
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        int ans=0;
        map<int,vector<int>> seen;
        for(int i=0;i<n-1;i++)
        {
            seen[edges[i][0]].push_back(edges[i][1]);
            seen[edges[i][1]].push_back(edges[i][0]);
        }
        set<int> forbid;
        for(int i=0;i<restricted.size();i++)
        {
            forbid.insert(restricted[i]);
        }
        set<int> visit;
        queue<int> que;
        que.push(0);
        visit.insert(0);
        while(!que.empty())
        {
            int cur=que.front();
            que.pop();
            ans++;
            for(int i=0;i<seen[cur].size();i++)
            {
                if(forbid.count(seen[cur][i])==0&&visit.count(seen[cur][i])==0)
                {
                    que.push(seen[cur][i]);
                    visit.insert(seen[cur][i]);
                }
            }//for
            
        }//while
        return ans;
        
    }
};
