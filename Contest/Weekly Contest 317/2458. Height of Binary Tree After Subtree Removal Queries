##############################
The solution of others: 2 DFS
##############################
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int,int> seen;
    vector<int> res;
    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {
        int max_height=height(root);
        res=vector<int>(seen.size()+1);
        vector<int> ans(queries.size());
        dfs(root,-1,0);
        for(int i=0;i<queries.size();i++)
        {
            ans[i]=res[queries[i]];
        }//for i
        return ans;
        
        
    }
    int height(TreeNode* root)
    {
        if(root==nullptr) return 0;
        int ans=0;
        ans=1+max(height(root->left),height(root->right));
        seen[root->val]=ans;
        return ans;     
    }//height
    void dfs(TreeNode* root, int depth, int cur)
    {
        if(root==nullptr) return;
        res[root->val]=cur;
        int right_best=0;
        int left_best=0;
        if(root->right!=nullptr)
        {
            right_best=seen[root->right->val];
        }
        if(root->left!=nullptr)
        {
            left_best=seen[root->left->val];
        }
        dfs(root->left,depth+1,max(cur,depth+1+right_best));
        dfs(root->right,depth+1,max(cur,depth+1+left_best));
    }//dfs
};
