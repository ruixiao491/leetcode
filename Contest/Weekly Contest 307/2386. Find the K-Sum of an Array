#############################################################################################################################################
The solution of others: priority_queue: https://leetcode.com/problems/find-the-k-sum-of-an-array/discuss/2457384/Priority-Queue-oror-C%2B%2B
#############################################################################################################################################
class Solution {
public:
    long long kSum(vector<int>& nums, int k) {
        int n = nums.size();
        long long maxsum = 0;
	    //subtract stores the sum which needs to be subtracted from the maximum sum
        vector<long long> subtract;
        //find the maxsum and update nums so that all elements are positive
        for(int i=0;i<n;i++){
            if(nums[i]>=0){
                maxsum+=nums[i];
            }else{
                nums[i] = abs(nums[i]);
            }
        }
        //sorting nums as per absolute values
        sort(nums.begin(), nums.end());
        
        //Initialize priority queue (minheap) to store current least value which needs to be
        //subtracted from maxsum and the index of nums we are currently at.
        priority_queue<pair<long long,int>, vector<pair<long long,int>>, greater<pair<long long,int>>> pq;
        //start from index 0 with minimum value as nums[0]
        pq.push({nums[0], 0});
        while(!pq.empty() && subtract.size()<k-1){
            pair<long long,int> topp = pq.top(); 
            pq.pop();
            long long subt = topp.first;
            int idx = topp.second;
            //push this value top subtract array
            subtract.push_back(subt);
            //if we are not at last idx then we can add further values to pq
            if(idx<n-1){
                pq.push({subt+nums[idx+1] , idx+1});
                pq.push({nums[idx+1] + (subt-nums[idx]) , idx+1});
            }
        }
       /* 
        //ans stores all the largest sum in decreasing order
        vector<long long>ans;
        ans.push_back(maxsum);
        for(long long subt:subtract) {
            ans.push_back(maxsum - subt);
        }
        //return Kth largest sum 
        return ans[k-1];
        */
        if(k==1) return maxsum;
        return maxsum-subtract[k-2];
    }
};


###########################################################################################################################################################
The solution of others: DFS: https://leetcode.com/problems/find-the-k-sum-of-an-array/discuss/2462675/C%2B%2B-Explained-heuristic-DFS-296ms-faster-than-77
############################################################################################################################################################
class Solution {
public:
    priority_queue<long long> candidates;
    int _k;
    
    void dfs(vector<int> &a, int index, int pick, long long val) {
        if (pick == 0) {
            candidates.push(val);
            while (candidates.size() > _k) candidates.pop();
            return;
        }
        if (index >= a.size()) return;
        // Important prune!!
        if (candidates.size() == _k && (long long) pick * a[index] + val >= candidates.top()) return;
        
        dfs(a, index + 1, pick - 1, val + a[index]);
        dfs(a, index + 1, pick, val);
    }
    
    long long kSum(vector<int>& a, int k) {
        long long base = 0;
        _k = k;
        for (int i = 0; i < a.size(); i ++) {
            if (a[i] > 0) base += a[i];
            else a[i] = -a[i];
        }
        sort(a.begin(), a.end());
        
        candidates.push(0);
        // Only select one
        for (int i = 0; i < k && i < a.size(); i ++) candidates.push(a[i]);
        
        for (int pick = 2; pick <= 10; pick ++) {
            dfs(a, 0, pick, 0LL);
        }
        
        return base - candidates.top();
    }
};


