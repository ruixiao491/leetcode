///My solution: DP
class Solution {
public:
    int maximumsSplicedArray(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size();
        vector<vector<vector<int>>> sum1(n,vector<vector<int>>(2,vector<int>(2)));
        vector<vector<vector<int>>> sum2(n,vector<vector<int>>(2,vector<int>(2)));
        //sum1[i][0][0] no change, sum1[i][1][0] change before i, sum1[i][1][1] change at i
        sum1[0][0][0]=nums1[0];
        sum1[0][1][1]=nums2[0];
        sum2[0][0][0]=nums2[0];
        sum2[0][1][1]=nums1[0];
        sum1[0][1][0]=nums1[0];
        sum2[0][1][0]=nums2[0];
        for(int i=1;i<n;i++)
        {
            sum1[i][0][0]=sum1[i-1][0][0]+nums1[i];
            sum2[i][0][0]=sum2[i-1][0][0]+nums2[i];
            sum1[i][1][0]=max(sum1[i-1][1][0]+nums1[i],sum1[i-1][1][1]+nums1[i]);
            sum2[i][1][0]=max(sum2[i-1][1][0]+nums2[i],sum2[i-1][1][1]+nums2[i]);
            sum1[i][1][1]=max(sum1[i-1][0][0]+nums2[i],sum1[i-1][1][1]+nums2[i]);
            sum2[i][1][1]=max(sum2[i-1][0][0]+nums1[i],sum2[i-1][1][1]+nums1[i]);
        
            
        }//for
        int maxval1=max(sum1[n-1][0][0],max(sum1[n-1][1][0],sum1[n-1][1][1]));
        int maxval2=max(sum2[n-1][0][0],max(sum2[n-1][1][0],sum2[n-1][1][1]));
        return max(maxval1,maxval2);
    }
};


#########################################
The soltuion of others in the discussion
#########################################
int score(vector<int>& a, vector<int>& b) {
    int runningSum = 0, maxi = 0;
    int sum = accumulate(a.begin(), a.end(), 0);

    for (int i = 0; i < a.size(); i++) {
        runningSum += b[i] - a[i];
        if (runningSum < 0)
            runningSum = 0;
        maxi = max(maxi, runningSum);
    }

    return sum + maxi;
}

int maximumsSplicedArray(vector<int>& nums1, vector<int>& nums2) {
    return max(score(nums1, nums2), score(nums2, nums1));
}
