##############################################################
The solution in the solution part: Greedy using priority queue
##############################################################
class Solution {
public:
    bool isPossible(vector<int>& nums) {
        int n=nums.size();
        if(n<3) return false;
        auto cmp=[](const vector<int>& a, const vector<int>& b)
        {
            if(a[1]==b[1])
            {
                return a[1]-a[0]>b[1]-b[0];
            }
            return a[1]>b[1];
        };
        priority_queue<vector<int>,vector<vector<int>>,decltype(cmp)> que(cmp);
        for(int i=0;i<n;i++)
        {
            while(!que.empty()&&que.top()[1]+1<nums[i])
            {
                auto it=que.top();
                que.pop();
                int length=it[1]-it[0]+1;
                if(length<3) return false;
            }//while
            if(que.empty()||que.top()[1]==nums[i])
            {
                que.push({nums[i],nums[i]});
            }
            else
            {
                auto it=que.top();
                que.pop();
                que.push({it[0],nums[i]});
            }
                      
        }//for i
        
        while(!que.empty())
        {
            auto it=que.top();
            que.pop();
            int length=it[1]-it[0]+1;
            if(length<3) return false;
        }//while
        return true;
        
        
    }
};



#####################################################
The solution in the solution part: Greedy using maps
#####################################################
class Solution {
public:
    bool isPossible(vector<int>& nums) {
        int n=nums.size();
        if(n<3) return false;
        map<int,int> seen;
        map<int,int> ended;
        for(int i=0;i<n;i++)
        {
            seen[nums[i]]++;
        }//for i
        
        for(int i=0;i<n;i++)
        {
            if(seen[nums[i]]==0) continue;
            if(ended[nums[i]-1]>0)
            {
                ended[nums[i]-1]--;
                ended[nums[i]]++;
            }
            else if(seen[nums[i]+1]>0&&seen[nums[i]+2]>0)
            {
                seen[nums[i]+1]--;
                seen[nums[i]+2]--;
                ended[nums[i]+2]++;
            }//else if
            else
            {
                return false;
            }
            seen[nums[i]]--;
            
            
        }//for i
        return true;
        
    }
};
