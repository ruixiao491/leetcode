///My solution: 
class Solution {
private: 
    string backspace(string s)
    {
        string ans="";
        for(int i=0; i<s.size();i++)
        {
            if(s[i]!='#')
            {
                ans.push_back(s[i]);           
            }
            else
            {
                if(!ans.empty())
                {
                  ans.pop_back();  
                }
                
            }            
        }//for
        return ans;
        
    
}//backspace
public:
    bool backspaceCompare(string s, string t) {
        string s1=backspace(s);
        string t1=backspace(t);
        if(s1==t1)
        {
            return true;
            
        }
        return false;
        
    }
};


#################################################################################
The solution in the solution part: Solution2: two pointers (traverse reversely)
#################################################################################
class Solution {
public:
    bool backspaceCompare(string S, string T) {
        int i = S.length() - 1, j = T.length() - 1;
        int skipS = 0, skipT = 0;

        while (i >= 0 || j >= 0) {
            while (i >= 0) {
                if (S[i] == '#') {
                    skipS++, i--;
                } else if (skipS > 0) {
                    skipS--, i--;
                } else {
                    break;
                }
            }
            while (j >= 0) {
                if (T[j] == '#') {
                    skipT++, j--;
                } else if (skipT > 0) {
                    skipT--, j--;
                } else {
                    break;
                }
            }
            if (i >= 0 && j >= 0) {
                if (S[i] != T[j]) {
                    return false;
                }
            } else {
                if (i >= 0 || j >= 0) {
                    return false;
                }
            }
            i--, j--;
        }
        return true;
    }
};

