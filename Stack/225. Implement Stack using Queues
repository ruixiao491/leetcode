////My solutions:
class MyStack {
public:
    queue<int> que1;
    queue<int> que2;
    MyStack() {
        
    }
    
    void push(int x) {
        que1.push(x);
        
    }
    
    int pop() {
        while(que1.size()!=1)
        {
            int value=que1.front();
            que2.push(value);
            que1.pop();
        }
        int ans=que1.front();
        que1.pop();
        while(!que2.empty())
        {
            int value=que2.front();
            que1.push(value);
            que2.pop();
        }//while
        return ans;
    }
    
    int top() {
        while(que1.size()!=1)
        {
            int value=que1.front();
            que2.push(value);
            que1.pop();
        }
        int ans=que1.front();
        que1.pop();
        que2.push(ans);
        while(!que2.empty())
        {
            int value=que2.front();
            que1.push(value);
            que2.pop();
        }//while
        return ans;
        
    }
    
    bool empty() {
        return que1.empty();
        
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
 
 ###########################################################
 The solution in the solution part:
 ###########################################################
 class MyStack {
public:
    queue<int> queue1;
    queue<int> queue2;

    /** Initialize your data structure here. */
    MyStack() {

    }

    /** Push element x onto stack. */
    void push(int x) {
        queue2.push(x);
        while (!queue1.empty()) {
            queue2.push(queue1.front());
            queue1.pop();
        }
        swap(queue1, queue2);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int r = queue1.front();
        queue1.pop();
        return r;
    }
    
    /** Get the top element. */
    int top() {
        int r = queue1.front();
        return r;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return queue1.empty();
    }
};

##########################################################
方法二：一个队列
##########################################################
class MyStack {
public:
    queue<int> q;

    /** Initialize your data structure here. */
    MyStack() {

    }

    /** Push element x onto stack. */
    void push(int x) {
        int n = q.size();
        q.push(x);
        for (int i = 0; i < n; i++) {
            q.push(q.front());
            q.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int r = q.front();
        q.pop();
        return r;
    }
    
    /** Get the top element. */
    int top() {
        int r = q.front();
        return r;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
};

