/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Constructor initializes an empty nested list.
 *     NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     NestedInteger(int value);
 *
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Set this NestedInteger to hold a single integer.
 *     void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     void add(const NestedInteger &ni);
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    NestedInteger deserialize(string s) {
        vector<NestedInteger> v;
        string curr="";
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='[')
            {
                v.push_back(NestedInteger());
            }
            else if(s[i]==',')
            {
                if(!curr.empty())
                {
                    int val=stoi(curr);
                    v.back().add(val);
                    curr="";        
                }    
            }
            else if(s[i]==']')
            {
                if(!curr.empty())
                {
                    int val=stoi(curr);
                    v.back().add(val);
                    curr="";         
                }
                
                if(v.size()>1)
                {
                    NestedInteger back=v.back();
                    v.pop_back();
                    v.back().add(back);
                    
                }
                
            }
            else
            {
                curr+=s[i];
                //std::cout<<curr<<std::endl;
            }//this is for numbers
            
        }//for i
        if(!curr.empty())
        {
            int val=stoi(curr);
            v.push_back(NestedInteger(val));       
        }
        
        
        return v.back();
    }
};
