////My solution: //not good
class Solution {
public:
    string reverseParentheses(string s) {
        stack<int> stk;
        vector<pair<int,int>> index_par;
        for(int i=0;i<s.size();i++)
        {
            //std::cout<<s[i]<<std::endl;
            if(s[i]=='(')
            {
                //std::cout<<"test1"<<std::endl;
                stk.push(i);
            }//if left
            if(s[i]==')')
            {
                //std::cout<<"test2"<<std::endl;
                int left=stk.top();
                //std::cout<<left<<"  "<<i<<std::endl;
                index_par.push_back({left,i});
                stk.pop();
            }//if right
            
            
        }//for i
        //std::cout<<index_par.size()<<std::endl;
        for(int i=0;i<index_par.size();i++)
        {
            int left=index_par[i].first+1;
            int right=index_par[i].second-1;
            //std::cout<<"left:  "<<left<<"   right:    "<<right<<std::endl;
            while(left!=right&&left<right)
            {
                swap(s[left],s[right]);
                left++;
                right--;               
            }
            
        }//for
        string str="";
        for(int i=0;i<s.size();i++)
        {
            if(s[i]!='('&&s[i]!=')')
            {
                str=str+s[i];
            }//if
        }
        return str;
    }
};



#######################################################
The solutions in the solution part (Chinese version)
#######################################################
Solution 1: Using stack
#########################
class Solution {
public:
    string reverseParentheses(string s) {
        stack<string> stk;
        string str;
        for (auto &ch : s) {
            if (ch == '(') {
                stk.push(str);
                str = "";
            } else if (ch == ')') {
                reverse(str.begin(), str.end());
                str = stk.top() + str;
                stk.pop();
            } else {
                str.push_back(ch);
            }
        }
        return str;
    }
};

###############################
Solution 2: backwards traverse
###############################
class Solution {
public:
    string reverseParentheses(string s) {
        int n = s.length();
        vector<int> pair(n);
        stack<int> stk;
        for (int i = 0; i < n; i++) {
            if (s[i] == '(') {
                stk.push(i);
            } else if (s[i] == ')') {
                int j = stk.top();
                stk.pop();
                pair[i] = j, pair[j] = i;
            }
        }

        string ret;
        int index = 0, step = 1;
        while (index < n) {
            if (s[index] == '(' || s[index] == ')') {
                index = pair[index];
                step = -step;
            } else {
                ret.push_back(s[index]);
            }
            index += step;
        }
        return ret;
    }
};

################################################
The link of the solution in the Chinese version
################################################
https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/solution/fan-zhuan-mei-dui-gua-hao-jian-de-zi-chu-gwpv/
