All solutions are from the solution part
#########################################
///Solution1:  Brute Force (not accepted)
#########################################
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        if (nums.size() < 3) {
            return false;
        }
        for (size_t i = 0; i < nums.size() - 2; i++) {
            for (size_t j = i + 1; j < nums.size() - 1; j++) {
                for (size_t k = j + 1; k < nums.size(); k++) {
                    if (nums[k] > nums[i] and nums[j] > nums[k]) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};
#################################################
////Solution2: Better Brute Force (not accepted)
#################################################
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        int min_i = INT_MAX;
        for (size_t j = 0; j < nums.size() - 1; j++) {
            min_i = min(min_i, nums[j]);
            for (size_t k = j + 1; k < nums.size(); k++) {
                if (nums[k] < nums[j] and min_i < nums[k]) {
                    return true;
                }
            }
        }
        return false;
    }
};

#################################
//Solution3: Searching intervals
#################################
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        vector<pair<int, int>> intervals;
        size_t min_point_after_last_peak_index = 0;
        for (size_t i = 1; i < nums.size(); i++) {
            // if we encounter a falling edge, then element i - 1 is a peak
            if (nums[i] < nums[i - 1]) {
                // make sure the peak occurs after the rising edge's minimum
                if (min_point_after_last_peak_index < i - 1) {
                    // nums[min_point_after_last_peak_index...(i-1)] is a valid rising peak
                    intervals.push_back({nums[min_point_after_last_peak_index], nums[i - 1]});
                }
                // the current element is the minimum for the next rising peak
                min_point_after_last_peak_index = i;
            }
            for (auto interval : intervals) {
                if (nums[i] > interval.first and nums[i] < interval.second) {
                    return true;
                }
            }
        }
        return false;
    }
};

#####################
Solution4: Stack
#####################
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        if (nums.size() < 3) {
            return false;
        }
        stack<int> stk;
        vector<int> min_array(nums.size());
        min_array[0] = nums[0];

        for (size_t i = 1; i < nums.size(); i++) {
            min_array[i] = min(min_array[i - 1], nums[i]);
        }
        for (size_t j = nums.size() - 1; j > 0; j--) {
            if (nums[j] <= min_array[j]) {
                continue;
            }
            while (!stk.empty() and stk.top() <= min_array[j]) {
                stk.pop();
            }
            if (!stk.empty() and stk.top() < nums[j]) {
                return true;
            }
            stk.push(nums[j]);
        }
        return false;
    }
};


########################################################
//The solution from the solution part in Chinese version
########################################################
//枚举 3 (sorted set with binary search)
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        int n = nums.size();
        if (n < 3) {
            return false;
        }

        // 左侧最小值
        int left_min = nums[0];
        // 右侧所有元素
        multiset<int> right_all;

        for (int k = 2; k < n; ++k) {
            right_all.insert(nums[k]);
        }

        for (int j = 1; j < n - 1; ++j) {
            if (left_min < nums[j]) {
                auto it = right_all.upper_bound(left_min);
                if (it != right_all.end() && *it < nums[j]) {
                    return true;
                }
            }
            left_min = min(left_min, nums[j]);
            right_all.erase(right_all.find(nums[j + 1]));
        }

        return false;
    }
};







