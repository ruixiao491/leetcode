//My solution:
class Solution {
public:
    int scoreOfParentheses(string s) {
        stack<string> stk;
        int ans=0;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]!=')')
            {
                string a="";
                a=a+s[i];
                stk.push(a);
            }
            else
            {
                int current=0;
                if(stk.top()=="(")
                {
                    stk.pop();
                    stk.push("1");
                }
                else
                {
                    while(!stk.empty()&&stk.top()!="(")
                    {
                        //std::cout<<stk.top()<<std::endl;
                        current=current+stoi(stk.top());
                        //std::cout<<current<<std::endl;
                        stk.pop();
                    }//while
                    //avoid '('
                    stk.pop();
                    //std::cout<<current*2<<std::endl;
                    stk.push(to_string(current*2));
                }//else
            }//else
        }//for
        while(!stk.empty())
        {
            //std::cout<<stk.top()<<std::endl;
            ans=ans+(stoi(stk.top()));
            stk.pop();
        }
        //std::cout<<ans<<std::endl;
        return ans;
        
    }
};



##########################################
A better method found in the forum:
class Solution {
public:
    int scoreOfParentheses(string S) {
        stack<int> s;
        // 考虑前面提到2次弹出，所以默认先插入一个0
        //  对结果无影响，同时无需考虑边缘情况去判断是否可以弹两次
        s.push(0); 

        for (char c : S)
        {
            if (c == '(')
            {
                // 默认分数为0
                s.push(0);
            }
            else
            {
                int s1 = s.top();
                s.pop();
                int s2 = s.top();
                s.pop();
                // 考虑当前 分数*2 然后再 加上上一个 分数之和
                s.push(max(1, 2*s1) + s2);
            }
        }

        return s.top();
    }
};

