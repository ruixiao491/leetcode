///My solution hit the time limit:
///Hit the time limit
class MinStack {
public:
    stack<int> stk1,stk2;
    MinStack() {
        
    }
    
    void push(int val) {
        stk1.push(val);       
    }
    
    void pop() {
        stk1.pop();
    }
    
    int top() {
        return stk1.top();
    }
    
    int getMin() {
        int value=stk1.top();
        while(!stk1.empty())
        {
            value= value<stk1.top() ? value:stk1.top();
            int temp=stk1.top();
            stk2.push(temp);
            stk1.pop();           
        }//while stk1
        while(!stk2.empty())
        {
            int temp=stk2.top();
            stk1.push(temp);
            stk2.pop();
        }//while
        return value;        
    }
};
*/
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */







#########################################
The solution in the solution part:
#########################################
///The second method in the solution part
class MinStack {    
public:
    stack<int> x_stack;
    stack<int> min_stack;
    MinStack() {
        min_stack.push(INT_MAX);
    }
    
    void push(int x) {
        x_stack.push(x);
        min_stack.push(min(min_stack.top(), x));
    }
    
    void pop() {
        x_stack.pop();
        min_stack.pop();
    }
    
    int top() {
        return x_stack.top();
    }
    
    int getMin() {
        return min_stack.top();
    }
};

##########################################
///Method one in the solution part
class MinStack {
public:
    stack<pair<int,int>>s;
    MinStack() {
        s.push({INT_MAX,INT_MAX});
    }
    
    void push(int val) {
        s.push({val,min(s.top().second,val)});
    }
    
    void pop() {
        s.pop();
    }
    int top() {
        return s.top().first;
    }
    int getMin() {
        return s.top().second;
    }
};


##################################################
///Method three in the solution part
class MinStack {
public:
    std::stack<int> stack;
    std::stack<pair<int,int>>minstack;
    
    
    MinStack() {
    }
    
    void push(int val) {
        stack.push(val);
        if(minstack.empty()||val<minstack.top().first)
        {
            minstack.push({val,1});
        }
        else
        {
            if(val==minstack.top().first)
            {
                minstack.top().second++;
            }
        }
    }
    
    void pop() {
        if(minstack.top().first==stack.top())
        {
            if(minstack.top().second>1)
            {
                minstack.top().second--;
            }
            else
            {
                minstack.pop();
            }
        }//if
        stack.pop();
    }
    
    int top() {
        return stack.top();
    }
    
    int getMin() {
        return minstack.top().first;
    }
    

};
