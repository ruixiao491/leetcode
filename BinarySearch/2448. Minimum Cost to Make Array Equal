######################################################################
The solution of others: Binary search, more accurately ternary search
######################################################################
class Solution {
public:
    long long minCost(vector<int>& nums, vector<int>& cost) {
        int left=INT_MAX, right=INT_MIN;
        for(int i=0;i<nums.size();i++)
        {
            left=min(left,nums[i]);
            right=max(right,nums[i]);
        }//for i
        long long y1=0, y2=0;
        while(left<right)
        {
            int mid=left+(right-left)/2;
            y1=calculate(cost,mid,nums);
            y2=calculate(cost,mid+1,nums);
            if(y1<y2)
            {
                right=mid;
            }
            else
            {
                left=mid+1;
            }      
        }//while
        return min(y1,y2);
        
    }//minCost
    long long calculate(vector<int>& cost,int target,vector<int>& nums)
    {
        long long ans=0;
        for(int i=0;i<nums.size();i++)
        {
            ans+=(long long) abs(nums[i]-target)*cost[i];
        }//for
        return ans;
        
    }

};


##########################################
The solution of others': weighted median
Observation
Think of the cost array as the weight of the corresponding num in the nums array. For example when nums = [1, 3, 5, 2] and cost = [2, 3, 1, 14], suppose we want to increase 1 in nums to 2, we know that the cost for this operation is 2. However, this is equivalent as if there are two 1â€™s in nums and we increase both of them to 2. Therefore, the minimum total cost such that all the elements of the array nums become equal is equivalent to the minimum total cost such that all the elements of the array
nums = [1, 1, 3, 3, 3, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
become equal, with the cost of doing one operation on each element being 1. As such, the answer to this question is the total cost for moving all elements to the (unweighted) median in the new (collapsed) array. See also LC 462. Minimum Moves to Equal Array Elements II and LC 296. Best Meeting Point for practice of unweighted median problems.
https://leetcode.com/problems/minimum-cost-to-make-array-equal/discuss/2734183/Python3-Weighted-Median-O(NlogN)-with-Explanations
##########################################
class Solution {
public:
    long long minCost(vector<int>& nums, vector<int>& cost) {
        vector<vector<int>> arrs;
        long long total=0;
        long long ans=0;
        for(int i=0;i<nums.size();i++)
        {
            arrs.push_back({nums[i],cost[i]});
            total+=cost[i];
        }//for i
        sort(arrs.begin(),arrs.end());
        long long cur=0;
        int index=0;
        for(int i=0;i<arrs.size();i++)
        {
            cur+=arrs[i][1];
            if(cur>total/2)
            {
                index=i;
                break;
            }
        }//for i
        //std::cout<<index<<std::endl;
        for(int i=0;i<arrs.size();i++)
        {
            ans+=(long long) abs(arrs[i][0]-arrs[index][0])*arrs[i][1]; 
        }
        return ans;
        
    }
};
