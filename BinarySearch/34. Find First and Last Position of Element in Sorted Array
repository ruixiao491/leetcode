//my solution
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2,-1);
        int n=nums.size();
        if(n==0)
        {
            return ans;
        }
        if(n==1)
        {
            if(nums[0]!=target)
            {
                return ans;
            }
            else
            {
                ans[0]=0;
                ans[1]=0;
                return ans;
            }
        }//if 1
        //lower_bound means not less than
        int index=lower_bound(nums.begin(),nums.end(),target)-nums.begin();
        int index_upper = upper_bound(nums.begin(),nums.end(),target)-nums.begin();
        if(index<index_upper)
        {
            ans[0]=index;
            ans[1]=index_upper-1;
        }
        
                                                     
        return ans;                                        
        
    }
};



//solution part two binary search
class Solution { 
public:
    int binarySearch(vector<int>& nums, int target, bool lower) {
        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid] > target || (lower && nums[mid] >= target)) {
                right = mid - 1;
                ans = mid;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int leftIdx = binarySearch(nums, target, true);
        int rightIdx = binarySearch(nums, target, false) - 1;
        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {
            return vector<int>{leftIdx, rightIdx};
        } 
        return vector<int>{-1, -1};
    }
};

