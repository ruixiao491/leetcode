/*
//my two binary search
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        if(n==0)
        {
            return -1;
        }
        if(n==1)
        {
            if(nums[0]==target)
            {
                return 0;
            }
            else
            {
                return -1;
            }
        }
        int left=0, right=nums.size()-1;
        //to find the index of the largest val
        while(left<right)
        {
            int mid = left+(right-left)/2;
            if((nums[mid]<nums[mid+1])&&(nums[mid]>=nums[0]))
            {
                left=mid+1;
            }//if
            else
            {
                right=mid;
            }//else
        }//while
        std::cout<<"max val index: "<<right<<std::endl;
        int index=-1;
        //the larget is at index right.
        if(nums[right]>=target&&target>=nums[0])
        {
            index=lower_bound(nums.begin(),nums.begin()+right,target)-nums.begin();
            if(index<n)
            {
                if(nums[index]==target)
                {
                    return index;
                }
            }
        }//if
        if(right<(n-1)&&nums[0]>target&&nums[right+1]<=target)
        {
            index=lower_bound(nums.begin()+right+1,nums.end(),target)-nums.begin();
            if(index<n)
            {
                //std::cout<<index<<std::endl;
                if(nums[index]==target)
                {
                    return index;
                }
            }
        }//if nums[0]>target
        return -1;

    }
};
*/
//solution one binary search
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = (int)nums.size();
        if (!n) {
            return -1;
        }
        if (n == 1) {
            return nums[0] == target ? 0 : -1;
        }
        int l = 0, r = n - 1;
        while (l <= r) {
            int mid = (l + r) / 2;
            if (nums[mid] == target) return mid;
            if (nums[0] <= nums[mid]) {
                if (nums[0] <= target && target < nums[mid]) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            } else {
                if (nums[mid] < target && target <= nums[n - 1]) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
        }
        return -1;
    }
};
