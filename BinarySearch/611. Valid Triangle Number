/*
//solution 1 Time Limit Exceeded Brute Force
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int number=0;
        if(nums.size()<3)
        {
            return 0;
        }
        else
        {
            for(int i=0; i<=nums.size()-3;i++)
            {
                for(int j=i+1;j<=nums.size()-2;j++)
                {
                    for(int k=j+1;k<=nums.size()-1;k++)
                    {
                        if((nums[i]+nums[j]>nums[k])&&(nums[i]+nums[k]>nums[j])&&(nums[j]+nums[k]>nums[i]))
                        {
                            number++;
                        }//if
                    }//for k
                }//for j
            }//for i
        }//else
        return number;
    }
};
*/
/*
//binary search based on solution java.
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int counts=0;
        sort(nums.begin(),nums.end());
        if(nums.size()<3)
        {
            return 0;
        }
        else
        {
            for(int i=0; i<nums.size()-2;i++)
            {
                for(int j=i+1;j<nums.size()-1;j++)
                {
                //std::cout<<"i:  "<<nums[i]<<"  "<<"j:  "<<nums[j]<<std::endl;
                    int k=j+1;
                    k=binarySearch(nums,k,nums.size()-1,nums[i]+nums[j]);
                    counts+= k-j-1;
                }//for j
            }//for i
        }//else
        return counts;
    }//triangleNumber
public:
    int binarySearch(vector<int>& nums, int left, int right, int target)
{
    while(left<=right)
    {
        int mid = left+(right-left)/2+((right-left)%2!=0);
        //std::cout<<"mid:  "<<mid<<"  "<<"left:"<<left<<"right:   "<<right<<"target: "<<target<<std::endl;
        if(nums[mid]>=target)
        {
            right=mid-1;
        }//if
        else
        {
            left=mid+1;
        }
    }//while
    return left;
}//binarySearch
};
*/
class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int counts=0;
        sort(nums.begin(),nums.end());
        if(nums.size()<3)
        {
            return 0;
        }
        else
        {
            for(int i=0;i<nums.size()-2;i++)
            {
                //int k=i+2;
                for(int j=i+1;j<nums.size()-1;j++)
                {
                    //int k=j+1;
                    int k = lower_bound(nums.begin()+j+1,nums.end(), nums[i]+nums[j]) - nums.begin();
                    counts+=k-j-1;
                }//for j
            }//for i
        }//else
       return counts;     
    }
};
