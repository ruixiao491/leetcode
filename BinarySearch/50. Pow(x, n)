//my solution:  Brute Force: time limit exceeded
/*
class Solution {
public:
    double myPow(double x, int n) {
        double ans=1;
        if(n==0) return 1;
        if(n==1) return x;
        if(n>1)
        {
            for(int i=1;i<=n;i++)
            {
                ans=ans*x;
            }
        }//1
        if(n==-1)
        {
            return 1/x;
        }
        if(n<-1)
        {
            for(int i=1;i<=abs(n);i++)
            {
                ans=ans/x;
            }
        }
        
        return ans;
        
    }
};
*/

//The following solutions are from the solution part
//solution 2: Fast Power Algorithm Recursive
class Solution {
public:
    double fastPow(double x, long long n) {
        if (n == 0) {
            return 1.0;
        }
        double half = fastPow(x, n / 2);
        if (n % 2 == 0) {
            return half * half;
        } else {
            return half * half * x;
        }
    }
    double myPow(double x, int n) {
        long long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        return fastPow(x, N);
    }
};

//solution 3: Fast Power Algorithm Iterative
class Solution {
public:
    double myPow(double x, int n) {
        long long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        double ans = 1;
        double current_product = x;
        for (long long i = N; i ; i /= 2) {
            if ((i % 2) == 1) {
                ans = ans * current_product;
            }
            current_product = current_product * current_product;
        }
        return ans;
    }
};
