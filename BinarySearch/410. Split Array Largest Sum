##########################################################
Inspired by the hint of the question: Sort + Binary Search
##########################################################
class Solution {
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end());
        int max_dirff=nums[nums.size()-1]-nums[0];
        int left=0;
        int right=max_dirff;
        while(left<=right)
        {
            int mid=left+(right-left)/2;
            //std::cout<<left<<" "<<right<<" "<<mid<<std::endl;
            //std::cout<<left<<" "<<right<<" "<<mid<<" "<<count(nums,k)<<std::endl;
            if(count(nums,mid)>=k)
            {
                right=mid-1;
            }
            else if(count(nums,mid)<k)
            {
                left=mid+1;
            }
            
        }//while
        return left;
        
    }
     int count(vector<int>& nums, int val)
     {
         int ans=0;
         for(int i=0;i<nums.size();i++)
         {
             auto it=upper_bound(nums.begin(),nums.end(),nums[i]+val);
             //std::cout<<nums[i]<<" "<<val<<" "<<it-nums.begin()-i-1<<std::endl;
             ans+=it-nums.begin()-i-1;      
         }//for i
         return ans;
         
     }//count
};



#########################################################################
The solution in the solution part: Sort + Binary Search + sliding window
#########################################################################
class Solution {
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int n = nums.size(), left = 0, right = nums.back() - nums.front();
        while (left <= right) {
            int mid = (left + right) / 2;
            int cnt = 0;
            for (int i = 0, j = 0; j < n; j++) {
                while (nums[j] - nums[i] > mid) {
                    i++;
                }
                cnt += j - i;
            }
            if (cnt >= k) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
};
