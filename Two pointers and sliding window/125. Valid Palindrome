//My solution
//two pointers
class Solution {
public:
    bool isPalindrome(string s) {
        if(s==" ")
        {
            return true;
        }
        int i=0, j=s.size()-1;
        while(i<=j)
        {
            while(i<s.size()&&!isalnum(s[i]))
            {
                i++;
            }//while !isalnums[i]
            while(j>=0&&!isalnum(s[j]))
            {
                j--;
            }
            if((isdigit(s[i])&&s[i]!=s[j])||isalpha(s[i])&&tolower(s[i])!=tolower(s[j]))
            {
                return false;
            }
            else
            {
                i++;
                j--;            
            }
        }//while
        return true;
    }
};

############################################
///the first solution in the solution part
############################################
class Solution {
 public:
  bool isPalindrome(string s) {
    string filtered_string="", reversed_string="";

    for (auto ch : s) {
      if (isalnum(ch))
        filtered_string += tolower(ch);
    }

    reversed_string.resize(filtered_string.size());
    reverse_copy(filtered_string.begin(), filtered_string.end(),
                 reversed_string.begin());

    return filtered_string == reversed_string;
  }
};
