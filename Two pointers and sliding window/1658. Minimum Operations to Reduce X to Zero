############################################################
The solution in the solution part: two pointers (indirectly)
############################################################
class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int total = 0;
        for (int num : nums) {
            total += num;
        }
        int n = nums.size();
        int maxi = -1;
        int left = 0;
        int current = 0;

        for (int right = 0; right < n; right++) {
            // sum([left ,..., right]) = total - x
            current += nums[right];
            // if larger, move `left` to left
            while (current > total - x && left <= right) {
                current -= nums[left];
                left += 1;
            }
            // check if equal
            if (current == total - x) {
                maxi = max(maxi, right - left + 1);
            }
        }
        return maxi != -1 ? n - maxi : -1;
    }
};



##########################################################
The solution in the solution part: two pointers (directly)
##########################################################
class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int current = 0;
        for (int num : nums) {
            current += num;
        }
        int n = nums.size();
        int mini = INT_MAX;
        int left = 0;

        for (int right = 0; right < n; right++) {
            // sum([0,..,left) + (right,...,n-1]) = x
            current -= nums[right];
            // if smaller, move `left` to left
            while (current < x && left <= right) {
                current += nums[left];
                left += 1;
            }
            // check if equal
            if (current == x) {
                mini = min(mini, (n - 1 - right) + left);
            }
        }
        return mini != INT_MAX ? mini : -1;
    }
};
