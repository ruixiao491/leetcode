#################################################################
///Sieve of Erathosthenes in the solution part of Chinese version
#################################################################
class Solution {
public:
    int countPrimes(int n) {
        vector<int> isPrime(n, 1);
        int ans = 0;
        for (int i = 2; i < n; ++i) {
            if (isPrime[i]) {
                ans += 1;
                if ((long long)i * i < n) {
                    for (int j = i * i; j < n; j += i) {
                        isPrime[j] = 0;
                    }
                }
            }
        }
        return ans;
    }
};

##################################################################
///Sieve of Erathosthenes in the solution part of English version
##################################################################
class Solution {
public:
    int countPrimes(int n) {
        if(n<=2)
        {
            return 0;
        }
        vector<int> isPrime(n,1);
        int ans=1;
        for(int i=2;i<sqrt(n);i++)
        {
            if(isPrime[i])
            {
                long long j=(long long) i*i;
                while(j<n)
                {
                    isPrime[j]=0;
                    j=j+i;
                }//while
            }//if
        }//for i
        for(int i=3;i<n;i=i+2)
        {
            if(isPrime[i]==1)
            {
                ans++;
            }//if
        }//for i=3
        return ans;
    }
};
