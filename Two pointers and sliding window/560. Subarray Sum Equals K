############################################################
//My solution: Brute Force, should hit the time limit o(n2)
############################################################
class Solution {
public:
    int subarraySum(vector<int>& nums, int k){
        int ans=0;
        for(int i=0;i<nums.size();i++)
        {
            
            if(nums[i]==k)
            {
                ans++;
            }
            int j=i+1;
            int sum=nums[i];
            while(j<nums.size())
            {
                sum=sum+nums[j];
                if(sum<k)
                {
                    j++;
                }
                else if(sum==k)
                {
                    ans++;
                    j++;
                    //std::cout<<ans<<"  "<<i<<"  "<<j<<std::endl;
                }
                else
                {
                    j++;
                }       
            }//while j
        
            
        }//for i
        return ans;
    }
};

########################################################
///My solution: accumlate sum 0(n2), hit the time limit
########################################################
class Solution {
public:
    int subarraySum(vector<int>& nums, int k){
        int ans=0;
        vector<int> sum(nums.size());
        sum[0]=nums[0];
        for(int i=1;i<nums.size();i++)
        {
            sum[i]=sum[i-1]+nums[i];
        }//for i
        for(int i=0;i<nums.size();i++)
        {
            if(sum[i]==k)
            {
                ans++;
            }
            for(int j=i+1;j<nums.size();j++)
            {
                if(sum[j]-sum[i]==k)
                {
                    ans++;
                }//if
            }//for j
        }//for i
        return ans;
    }
};

############################################################
The solution in the solution part: accumlate sum + map o(n)
############################################################

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int count=0;
        int prev=0;
        map<int,int> seen;
        seen[0]=1;
        for(int i=0;i<nums.size();i++)
        {
            prev=prev+nums[i];
            if(seen.find(prev-k)!=seen.end())
            {
                count=count+seen[prev-k];
            }//if
            seen[prev]++;
        }
        return count;
    }
};
