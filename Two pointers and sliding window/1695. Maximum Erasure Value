///My solution: 2 pointers+set
class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int test=0;
        int ans=0;
        set<int> seen;
        int left=0, right=0;
        int n=nums.size();
        while(right<n)
        {
            if(seen.find(nums[right])==seen.end())
            {
                seen.insert(nums[right]);
                test+=nums[right];
                right++;
            }//if
            else
            {
                ans=max(ans,test);
                while(seen.find(nums[right])!=seen.end())
                {
                    seen.erase(nums[left]);
                    test-=nums[left];
                    left++;
                }//while
            }//else
        }//while
        ans=max(ans,test);
        return ans;
        
    }
};


#################################################
Optimized my solution a bit: 2 pointers+ set
#################################################
class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int result = 0, currentSum = 0, start = 0;
        unordered_set<int> seen;
        for (int end = 0; end < nums.size(); end++) {
            // increment start until subarray has unique elements
            while (seen.find(nums[end]) != seen.end()) {
                seen.erase(nums[start]);
                currentSum -= nums[start];
                start++;
            }
            currentSum += nums[end];
            seen.insert(nums[end]);
            // update result with maximum sum found so far
            result = max(result, currentSum);
        }
        return result;
    }
};

###################################################
The solution in the solution part: 2 pointers+array
###################################################
class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int result = 0, currentSum = 0, start = 0, k = 10001;
        vector<bool> isPresent(k, false);
        for (int end = 0; end < nums.size(); end++) {
            // increment start until subarray has unique elements
            while (isPresent[nums[end]]) {
                isPresent[nums[start]] = false;
                currentSum -= nums[start];
                start++;
            }
            isPresent[nums[end]] = true;
            currentSum += nums[end];
            // update result with maximum sum found so far
            result = max(result, currentSum);
        }
        return result;
    }
};

#######################################################
The solution in the solution part: using prefix sum+map
#######################################################
class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int n = nums.size(), result = 0, start = 0;
        unordered_map<int, int> lastIndexMap;
        vector<int> prefixSum(n + 1, 0);

        for (int end = 0; end < n; end++) {
            int currentElement = nums[end];
            prefixSum[end + 1] = prefixSum[end] + currentElement;
            if (lastIndexMap.find(currentElement) != lastIndexMap.end()) {
                start = max(start, lastIndexMap[currentElement] + 1);
            }
            // update result with maximum sum found so far
            result = max(result, prefixSum[end + 1] - prefixSum[start]);
            lastIndexMap[currentElement] = end;
        }
        return result;
    }
};



#####################################################
The solution in the solution part: prefix sum + array
#####################################################
class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        int n = nums.size(), result = 0, start = 0, k = 10001;
        vector<int> lastIndexes(k, -1);
        vector<int> prefixSum(n + 1, 0);
        for (int end = 0; end < n; end++) {
            int currentElement = nums[end];
            prefixSum[end + 1] = prefixSum[end] + currentElement;
            if (lastIndexes[currentElement] != -1) {
                start = max(start, lastIndexes[currentElement] + 1);
            }
            // update result with maximum sum found so far
            result = max(result, prefixSum[end + 1] - prefixSum[start]);
            // update last index of current element
            lastIndexes[currentElement] = end;
        }
        return result;
    }
};
