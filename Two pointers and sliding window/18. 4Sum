//My previous solution hits the time limit
//modify a bit, could work (sort then skip the duplicates, also it would be faster, if we add more constrains)
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        multimap<int,pair<int,int>> seen;
        set<vector<int>> seen2;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                seen.insert({(nums[i]+nums[j]),make_pair(i,j)});
            }//for j
        }//for i

        for(int i=0;i<nums.size();i++)
        {
            
            if(i>0&&nums[i]==nums[i-1])
            {
                continue;
            }
            
            for(int j=i+1;j<nums.size();j++)
            {
               
                if(j>i+1&&nums[j]==nums[j-1])
                {
                    continue;
                }
                
                int numbers=seen.count(target-nums[i]-nums[j]);
                    for(auto it1=seen.find(target-nums[i]-nums[j]);it1!=seen.end()&&numbers>0;it1++,numbers--)
                    {
                        //std::cout<<nums[i]+nums[j]<<"   "<<target-nums[i]-nums[j]<<"  "<<it1->first<<"  "<<nums[it1->second.first]<<"  "<<nums[it1->second.second]<<std::endl;
                        if(it1->second.first!=i&&it1->second.first!=j&&it1->second.second!=i&&it1->second.second!=j)
                        {
                            vector<int> test={nums[i],nums[j],nums[it1->second.first],nums[it1->second.second]};
                            sort(test.begin(),test.end());
                            seen2.insert(test);
                            
                        }//if
                        
                    }//for auto
                
            }//for j
        }//for i
        auto it2=seen2.begin();
        while(it2!=seen2.end())
        {
            ans.push_back(*it2);
            it2++;
        }
        return ans;
        


    }
};

###################################################################################
///The solution in the solution part in the Chinese version: Two pointers
###################################################################################
It seems that we need to sort the arrays, if we want to use the two pointers method
###################################################################################
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> quadruplets;
        if (nums.size() < 4) {
            return quadruplets;
        }
        sort(nums.begin(), nums.end());
        int length = nums.size();
        for (int i = 0; i < length - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            if ((long) nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) {
                break;
            }
            if ((long) nums[i] + nums[length - 3] + nums[length - 2] + nums[length - 1] < target) {
                continue;
            }
            for (int j = i + 1; j < length - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                if ((long) nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target) {
                    break;
                }
                if ((long) nums[i] + nums[j] + nums[length - 2] + nums[length - 1] < target) {
                    continue;
                }
                int left = j + 1, right = length - 1;
                while (left < right) {
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if (sum == target) {
                        quadruplets.push_back({nums[i], nums[j], nums[left], nums[right]});
                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
                        left++;
                        while (left < right && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        right--;
                    } else if (sum < target) {
                        left++;
                    } else {
                        right--;
                    }
                }
            }
        }
        return quadruplets;
    }
};
########################################################################################
//the solution in the solution part in the English version, two pinters with recursion
########################################################################################
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(begin(nums), end(nums));
        return kSum(nums, target, 0, 4);
    }
	
    vector<vector<int>> kSum(vector<int>& nums, int target, int start, int k) {
        vector<vector<int>> res;        
        // If we have run out of numbers to add, return res.
        if (start == nums.size()) 
        {
            return res;
        }
        
        int average_value = target / k;
        
        // We cannot obtain a sum of target if the smallest value
        // in nums is greater than target / k or if the largest 
        // value in nums is smaller than target / k.
        if  (nums[start] > average_value || average_value > nums.back()) 
        {
            return res;
        }
            
        if (k == 2) 
        {
            return twoSum(nums, target, start);
        }
    
        for (int i = start; i < nums.size(); ++i) 
        {
            if (i == start || nums[i - 1] != nums[i]) 
            {
                for (vector<int>& subset : kSum(nums, static_cast<long>(target) - nums[i], i + 1, k - 1)) 
                {
                    res.push_back({nums[i]});
                    res.back().insert(end(res.back()), begin(subset), end(subset));
                }//for subset
            }//if i==start || nums[i-1]!=nums[i]
        }//for i=start
                                            
        return res;
    }
	
    vector<vector<int>> twoSum(vector<int>& nums, int target, int start) {
        vector<vector<int>> res;
        int lo = start, hi = nums.size() - 1;
    
        while (lo < hi) 
        {
            int curr_sum = nums[lo] + nums[hi];
            if (curr_sum < target || (lo > start && nums[lo] == nums[lo - 1])) 
            {
                ++lo;
            }//if curr_sum<target 
            else if (curr_sum > target || (hi < nums.size() - 1 && nums[hi] == nums[hi + 1])) 
            {
                --hi;
            }//else if 
            else 
            {
                res.push_back({ nums[lo++], nums[hi--] });
            }//else
        }//while lo<hi
                                                           
        return res;
    }//twoSum
};
