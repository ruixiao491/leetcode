///My solution: Brute Force
class TicTacToe {
public:
    vector<vector<int>> board;
    int N;
    TicTacToe(int n) {
        board=vector<vector<int>>(n,vector<int>(n,0));
        N=n;

        
    }
    
    int move(int row, int col, int player) {
        int a=1;
        if(player==2)
        {
            a=2;
        }
        board[row][col]=a;
        int flag=0;
        for(int i=0;i<N;i++)
        {
            if(board[row][i]!=a)
            {
                flag=1;
                break;
            }
        }//for i
        if(flag==0)
        {
            return a;
        }
        flag=0;
        for(int i=0;i<N;i++)
        {
            if(board[i][col]!=a)
            {
                flag=1;
                break;
            }
        }//for i
        if(flag==0)
        {
            return a;
        }
        if(row==col)
        {
            flag=0;
            for(int i=0;i<N;i++)
            {
                if(board[i][i]!=a)
                {
                    flag=1;
                    break;
                }
            }
            if(flag==0)
            {
                return a;
            }
        }//if
        
        if(row+col==N-1)
        {
            flag=0;
            for(int i=0;i<N;i++)
            {
                if(board[i][N-1-i]!=a)
                {
                    flag=1;
                    break;
                }
            }//for
            if(flag==0)
            {
                return a;
            }
        }//if
        return 0;
    }       
        
};

###############################################
The solution in the solution part: Brute Force
###############################################
class TicTacToe {
public:
    vector<vector<int>> board;
    int n;

    TicTacToe(int n) {
        board.assign(n, vector<int>(n, 0));
        this->n = n;
    }

    int move(int row, int col, int player) {
        board[row][col] = player;
        if (checkCol(col, player) ||
            checkRow(row, player) ||
            (row == col && checkDiagonal(player)) ||
            (row == n - col - 1 && checkAntiDiagonal(player))) {
            return player;
        }
        // No one wins
        return 0;
    }

    bool checkDiagonal(int player) {
        for (int row = 0; row < n; row++) {
            if (board[row][row] != player) return false;
        }
        return true;
    }

    bool checkAntiDiagonal(int player) {
        for (int row = 0; row < n; row++) {
            if (board[row][n - row - 1] != player) return false;
        }
        return true;
    }

    bool checkCol(int col, int player) {
        for (int row = 0; row < n; row++) {
            if (board[row][col] != player) return false;
        }
        return true;
    }

    bool checkRow(int row, int player) {
        for (int col = 0; col < n; col++) {
            if (board[row][col] != player) return false;
        }
        return true;
    }
};

###########################################################################
The solution in the solution part: Optimized method with o(1) time of move
###########################################################################
class TicTacToe {
public:
    vector<int> rows;
    vector<int> cols;
    int diagonal;
    int antiDiagonal;

    TicTacToe(int n) {
        rows.assign(n, 0);
        cols.assign(n, 0);
        diagonal = 0;
        antiDiagonal = 0;
    }

    int move(int row, int col, int player) {
        int currentPlayer = (player == 1) ? 1 : -1;
        // update currentPlayer in rows and cols arrays
        rows[row] += currentPlayer;
        cols[col] += currentPlayer;
        // update diagonal
        if (row == col) {
            diagonal += currentPlayer;
        }
        // update anti diagonal
        if (col == (cols.size() - row - 1)) {
            antiDiagonal += currentPlayer;
        }
        int n = rows.size();
        // check if the current player wins
        if (abs(rows[row]) == n ||
            abs(cols[col]) == n ||
            abs(diagonal) == n ||
            abs(antiDiagonal) == n) {
            return player;
        }
        // No one wins
        return 0;
    }
};
