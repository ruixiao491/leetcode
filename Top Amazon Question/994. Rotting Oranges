///My solution BFS+queue
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> que;
        vector<vector<int>> dir={{1,0},{-1,0},{0,1},{0,-1}};
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> visit(m,vector<int>(n,0));
        int ans=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                    que.push(make_pair(i,j));
                }//if
            }//for j
        }//for i

        while(!que.empty())
        {
            int length=que.size();
            ans++;
            for(int i=0;i<length;i++)
            {
                auto it=que.front();
                que.pop();
                int row=it.first;
                int col=it.second;
                for(int j=0;j<4;j++)
                {
                    int new_row=row+dir[j][0];
                    int new_col=col+dir[j][1];
                    if(new_row>=0&&new_row<m&&new_col>=0&&new_col<n&&grid[new_row][new_col]==1)
                    {
                        que.push(make_pair(new_row,new_col));
                        grid[new_row][new_col]=2;
                    }//if
                }//for j
            }//for i
            
        }//while
        ans--;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    return -1;
                }
            }//for j
        }//for i
        if(ans==-1)
        {
            return 0;
        }
        return ans;
    }
};



#################################################################################
The solution in the solution part: optimized BFS with o(1) memory (without queue)
#################################################################################
class Solution {
public:
    int m, n;
    int orangesRotting(vector<vector<int>>& grid) {
        m=grid.size();
        n=grid[0].size();
        int timestamp=2;
        while(runRottingProcess(timestamp,grid))
        {
            timestamp++;
        }//while
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    return -1;
                }
            }//for j
        }//for i
        return timestamp-2;
        
    }//orangeRotting
    
    bool runRottingProcess(int& timestamp, vector<vector<int>>& grid)
    {
        vector<vector<int>> dir={{1,0},{-1,0},{0,1},{0,-1}};
        bool option=false;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==timestamp)
                {
                    for(int k=0;k<4;k++)
                    {
                        int new_row=i+dir[k][0];
                        int new_col=j+dir[k][1];
                        if(new_row>=0&&new_row<m&&new_col>=0&&new_col<n&&grid[new_row][new_col]==1)
                        {
                            grid[new_row][new_col]=timestamp+1;
                            option=1;
                            
                        }//if
                    }//for k
                }
            }//forj
        }//for i
       return option; 
    }//runRottingProcess
};
