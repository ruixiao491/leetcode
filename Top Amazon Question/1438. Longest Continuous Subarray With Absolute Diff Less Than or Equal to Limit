///My solution: sliding window + map
class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        map<int,int> seen;
        int left=0, right=0;
        int n=nums.size();
        int minval=INT_MAX;
        int maxval=INT_MIN;
        int length=0;
        while(right<n)
        {
            seen[nums[right]]++;
            minval=min(minval,nums[right]);
            maxval=max(maxval,nums[right]);
            while(maxval-minval>limit)
            {
                length=max(length,right-left);
                //std::cout<<length<<"  "<<right<<"  "<<left<<std::endl;
                seen[nums[left]]--;
                if(seen[nums[left]]==0)
                {
                    seen.erase(nums[left]);
                }//if
                left++;
                minval=seen.begin()->first;
                auto it=seen.end();
                it--;
                maxval=it->first;
            }//while > limit
            if(right==n-1)
            {
                length=max(length,right-left+1);
            }//if
            right++;
        }//while
        return length;
    }
};


###############################################################################################
The solution in the solution part: similar to mine: sliding window + multiset (time: o(nlog(n))
###############################################################################################
class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        multiset<int> s;
        int n = nums.size();
        int left = 0, right = 0;
        int ret = 0;
        while (right < n) {
            s.insert(nums[right]);
            while (*s.rbegin() - *s.begin() > limit) {
                s.erase(s.find(nums[left++]));
            }
            ret = max(ret, right - left + 1);
            right++;
        }
        return ret;
    }
};

######################################################################
The solution in the solution part: sliding window + deque (time: o(n))
######################################################################
class Solution {
public:
    int longestSubarray(vector<int>& nums, int limit) {
        deque<int> queMax, queMin;
        int n = nums.size();
        int left = 0, right = 0;
        int ret = 0;
        while (right < n) {
            while (!queMax.empty() && queMax.back() < nums[right]) {
                queMax.pop_back();
            }
            while (!queMin.empty() && queMin.back() > nums[right]) {
                queMin.pop_back();
            }
            queMax.push_back(nums[right]);
            queMin.push_back(nums[right]);
            while (!queMax.empty() && !queMin.empty() && queMax.front() - queMin.front() > limit) {
                if (nums[left] == queMin.front()) {
                    queMin.pop_front();
                }
                if (nums[left] == queMax.front()) {
                    queMax.pop_front();
                }
                left++;
            }
            ret = max(ret, right - left + 1);
            right++;
        }
        return ret;
    }
};

