///My solution: BFS
class Solution {
public:
    int getFood(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> visit(m,vector<int>(n,0));
        vector<vector<int>> dir={{1,0},{-1,0},{0,1},{0,-1}};
        queue<pair<int,int>> que;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='*')
                {
                    que.push(make_pair(i,j));
                    visit[i][j]=1;
                }//if
            }
        }//for i
        int ans=0;
        while(!que.empty())
        {
            int length=que.size();
            ans++;
            for(int i=0;i<length;i++)
            {
                auto it=que.front();
                que.pop();
                int row=it.first;
                int col=it.second;
                for(int k=0;k<4;k++)
                {
                    int new_row=row+dir[k][0];
                    int new_col=col+dir[k][1];
                    if(new_row>=0&&new_row<m&&new_col>=0&&new_col<n&&visit[new_row][new_col]==0&&grid[new_row][new_col]!='X')
                    {
                        visit[new_row][new_col]=1;
                        if(grid[new_row][new_col]=='#')
                        {
                            return ans;
                        }
                        else
                        {
                            que.push(make_pair(new_row,new_col));
                        }
                        
                    }//if
                }//for k
                
            }//for i
        }//while
        
        return -1;
    }
};
