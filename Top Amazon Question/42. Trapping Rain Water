//My solution:
class Solution {
public:
    int trap(vector<int>& height) {
        int ans=0;
        int n=height.size();
        vector<int> maxval(n);
        for(int i=0;i<n;i++)
        {
            if(i==0)
            {
                maxval[i]=height[i];   
            }
            else
            {
                maxval[i]=max(maxval[i-1],height[i]);
            }
                
        }//for i
        
        for(int i=n-1;i>=0;i--)
        {
            if(i==n-1)
            {
                maxval[i]=min(maxval[i],height[i]);
            }
            else
            {
                int val=max(maxval[i+1],height[i]);
                maxval[i]=min(maxval[i],val);
            }
        }//for i
        
        for(int i=0;i<n;i++)
        {
            if(maxval[i]>height[i])
            {
                ans+=maxval[i]-height[i];
            }
            
        }//for i
        return ans;
    }
};


###############################################
The solution in the solution part: using stack
###############################################
class Solution {
public:
    int trap(vector<int>& height) {
        int ans=0;
        stack<int> stk;
        for(int i=0;i<height.size();i++)
        {
            while(!stk.empty()&&height[i]>height[stk.top()])
            {
                int top=stk.top();
                stk.pop();
                if(stk.empty())
                {
                    break;
                }
                int distance=i-stk.top()-1;
                int bound_height=min(height[i],height[stk.top()])-height[top];
                ans+=distance*bound_height;
            }//while
            stk.push(i);
        }//for i
        return ans;
    }
};

################################################
The solution in the solution part: two pointers
################################################
class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        int left = 0, right = height.size() - 1;
        int leftMax = 0, rightMax = 0;
        while (left < right) {
            leftMax = max(leftMax, height[left]);
            rightMax = max(rightMax, height[right]);
            if (height[left] < height[right]) {
                ans += leftMax - height[left];
                ++left;
            } else {
                ans += rightMax - height[right];
                --right;
            }
        }
        return ans;
    }
};

