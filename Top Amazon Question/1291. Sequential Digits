#############################################
The solution in the solution part: enumerate
#############################################
class Solution {
public:
    vector<int> sequentialDigits(int low, int high) {
        vector<int> ans;
        for (int i = 1; i <= 9; ++i) {
            int num = i;
            for (int j = i + 1; j <= 9; ++j) {
                num = num * 10 + j;
                if (num >= low && num <= high) {
                    ans.push_back(num);
                }
                /*//the following is what I added
                else if(num>high)
                {
                    break;
                }
                */
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};


##################################################
The solution in the solution part: sliding window
##################################################
class Solution {
public:
    vector<int> sequentialDigits(int low, int high) {
        string sample="123456789";
        int n=sample.size();
        vector<int> ans;
        int lowLen=to_string(low).size();
        int highLen=to_string(high).size();
        for(int length=lowLen;length<highLen+1;length++)
        {
            for(int start=0;start<=n-length;start++)
            {
                int num=stoi(sample.substr(start,length));
                if(num>=low&&num<=high)
                {
                    ans.push_back(num);
                }
            }//for start
        }//for length
        return ans;
    }
};
