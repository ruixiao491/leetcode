//BFS
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dir={{-1,0},{1,0},{0,-1},{0,1}};
        queue<pair<int,int>> que;
        int ans=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1')
                {
                    grid[i][j]='0';
                    que.push({i,j});
                    while(!que.empty())
                    {
                        auto it=que.front();
                        que.pop();
                        int first=it.first;
                        int second=it.second;
                        for(int i=0;i<4;i++)
                        {
                            int x=first+dir[i][0];
                            int y=second+dir[i][1];
                            if(x>=0&&x<m&&y>=0&&y<n&&grid[x][y]=='1')
                            {
                                que.push({x,y});
                                grid[x][y]='0';
                            }//if
                        }//for i  
                    }//while que is not empty
                    ans++;
                }//else

            }//for j
        }//for i
        return ans;
    }
};


//////Disjoint set
class Solution {
public:
    vector<int> root;
    vector<int> rank;
    int find(int x)
    {
        if(x==root[x])
        {
            return x;
        }
        return root[x]=find(root[x]);
    }//int find
    void unionbyrank(int x,int y)
    {
        int rootX=find(x);
        int rootY=find(y);
        if(rootX!=rootY)
        {
            if(rank[rootX]>rank[rootY])
            {
                root[rootY]=rootX;
            }
            else if(rank[rootX]<rank[rootY])
            {
                root[rootX]=rootY;
            }
            else
            {
                root[rootY]=rootX;
                rank[rootX]++;
            }
        }
    }//unionbyrank
    
    int numIslands(vector<vector<char>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        root=vector<int>(m*n,0);
        rank=vector<int>(m*n,1);
        for(int i=0;i<root.size();i++)
        {
            root[i]=i;
        }//for
        vector<vector<int>> dir={{-1,0},{1,0},{0,-1},{0,1}};
        vector<int> land;
        int ans=0;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1')
                {
                    grid[i][j]='0';
                    land.push_back(i*n+j);
                    for(int k=0;k<4;k++)
                    {
                        int x=i+dir[k][0];
                        int y=j+dir[k][1];
                        if(x>=0&&x<m&&y>=0&&y<n&&grid[x][y]=='1')
                        {
                            unionbyrank(i*n+j,x*n+y);                
                        }
                    }//for k
                }//if grid=='1'
            }//for j
        }//for i
        
        for(int i=0;i<land.size();i++)
        {
            if(land[i]==root[land[i]])
            {
                ans++;
            }//if
        }//for i
        

        return ans;
    }
};
