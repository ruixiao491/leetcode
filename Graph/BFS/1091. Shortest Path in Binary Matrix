class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid[0][0]==1)
        {
            return -1;
        }
        int n=grid.size();
        if(n==1)
        {
            return 1;
        }
        int ans=1;
        vector<vector<int>> dir={{-1,0},{1,0},{0,-1},{0,1},{-1,-1},{-1,1},{1,-1},{1,1}};
        vector<vector<int>> visit(n,vector<int>(n,0));
        queue<pair<int,int>> que;
        que.push(make_pair(0,0));
        visit[0][0]=1;
        while(!que.empty())
        {
            int m=que.size();
            for(int i=0;i<m;i++)
            {
                auto it=que.front();
                int x=it.first;
                int y=it.second;
                //std::cout<<ans<<"  "<<x<<"  "<<y<<std::endl;
                que.pop();
                for(int i=0;i<8;i++)
                {
                    int newx=x+dir[i][0];
                    int newy=y+dir[i][1];
                    if(newx>=0&&newx<n&&newy>=0&&newy<n&&grid[newx][newy]==0&&visit[newx][newy]==0)
                    {
                        //std::cout<<ans<<"  "<<x<<"   "<<y<<"  "<<newx<<"  "<<newy<<std::endl;
                        visit[newx][newy]=1;
                        if(newx==n-1&&newy==n-1)
                        {
                            return ans+1;
                        }
                        que.push(make_pair(newx,newy));
                    }//if
                }//for i8
            }//for im 
            //std::cout<<m<<std::endl;
            ans++;
        }//while
        return -1;
        
    }
};
