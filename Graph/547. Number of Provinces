///My solution: disjoint set
class Solution {
public:
    vector<int> root;
    vector<int> rank;
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        for(int i=0;i<n;i++)
        {
            root.push_back(i);
            rank.push_back(1);
        }
        //std::cout<<"test size "<<root.size()<<"   "<<rank.size()<<std::endl;
        //first step: union to group
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(isConnected[i][j]==1)
                {
                    unionSet(i,j);
                    //std::cout<<i<<"   "<<j<<"   "<<find(i)<<"  "<<find(j)<<std::endl;
                }
            }//for j
        }//for i
        set<int> seen;
        for(int i=0;i<n;i++)
        {
            //std::cout<<find(i)<<std::endl;
            seen.insert(find(i));
        }
        return seen.size();
    }//findCircleNum
    
    int find(int x){
        if(x==root[x])
        {
            return x;
        }
        return root[x]=find(root[x]);
        
    }//int find
    void unionSet(int x,int y){
        int rootX=find(x);
        int rootY=find(y);
        if(rootX != rootY)
        {
            if(rank[rootX]>rank[rootY])
            {
                root[rootY]=rootX;
            }
            else if(rank[rootX]<rank[rootY])
            {
                root[rootX]=rootY;
            }
            else
            {
                root[rootY]=rootX;
                rank[rootX]+=1;
            }
        }//if
    }//unionSet
    
};

########################################
///The solution part: Depth first search
########################################
class Solution {
public:
    void dfs(vector<vector<int>>& isConnected, vector<int>& visited, int i){
        for(int j=0;j<isConnected.size();j++)
        {
            if(isConnected[i][j]==1&&visited[j]==0)
            {
                visited[j]=1;
                dfs(isConnected,visited,j);
            }//if
            
        }//for j
    }//dfs
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        vector<int> visited(n,0);
        int ans=0;
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)
            {
                visited[i]=1;
                dfs(isConnected,visited,i);
                ans++;
            }//if
        }//for
        return ans;
    }//findCicleNum
    
};

#########################################
//The solution part: Breadth First search
#########################################
class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        int ans=0;
        queue<int> que;
        vector<int> visited(n,0);
        for(int i=0;i<n;i++)
        {
            if(visited[i]==0)
            {
                que.push(i);
                while(!que.empty())
                {
                    int s=que.front();
                    que.pop();
                    visited[s]=1;
                    for(int j=0;j<n;j++)
                    {
                        if(isConnected[s][j]==1&&visited[j]==0)
                        {
                            que.push(j);
                        }//if
                    }//for j
                }//while
                ans++;
            }//if
            
        }//for i
        return ans;
    }
};
