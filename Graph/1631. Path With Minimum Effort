///The solution in the solution part of Chinese version.

class Solution {
private:
    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        //the solution type
        //auto tupleCmp = [](const auto& e1, const auto& e2) {
          //  auto&& [x1, y1, d1] = e1;
            //auto&& [x2, y2, d2] = e2;
            //return d1 > d2;
        //};
        
        //my type
        auto tupleCmp=[](const tuple<int,int,int>& e1, const tuple<int,int,int>&e2) {
            return get<2>(e1) > get<2>(e2);
        };
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, decltype(tupleCmp)> q(tupleCmp);
        q.emplace(0, 0, 0);

        vector<int> dist(m * n, INT_MAX);
        dist[0] = 0;
        vector<int> seen(m * n);

        while (!q.empty()) {
            auto [x, y, d] = q.top();
            q.pop();
            int id = x * n + y;
            if (seen[id]) {
                continue;
            }
            if (x == m - 1 && y == n - 1) {
                break;
            }
            seen[id] = 1;
            for (int i = 0; i < 4; ++i) {
                int nx = x + dirs[i][0];
                int ny = y + dirs[i][1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && max(d, abs(heights[x][y] - heights[nx][ny])) < dist[nx * n + ny]) {
                    dist[nx * n + ny] = max(d, abs(heights[x][y] - heights[nx][ny]));
                    q.emplace(nx, ny, dist[nx * n + ny]);
                }
            }
        }
        
        return dist[m * n - 1];
    }
};

####################
////Binary search
####################
class Solution {
private:
    static constexpr int dirs[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();
        int left = 0, right = 999999, ans = 0;
        while (left <= right) {
            int mid = (left + right) / 2;
            queue<pair<int, int>> q;
            q.emplace(0, 0);
            vector<int> seen(m * n);
            seen[0] = 1;
            while (!q.empty()) 
            {
                auto [x, y] = q.front();
                q.pop();
                for (int i = 0; i < 4; ++i) 
                {
                    int nx = x + dirs[i][0];
                    int ny = y + dirs[i][1];
                    if (nx >= 0 && nx < m && ny >= 0 && ny < n && !seen[nx * n + ny] && abs(heights[x][y] - heights[nx][ny]) <= mid) 
                    {
                        q.emplace(nx, ny);
                        seen[nx * n + ny] = 1;
                    }//if
                }//for
            }//while que is not empty
            
            if (seen[m * n - 1]) 
            {
                ans = mid;
                right = mid - 1;
            }
            else 
            {
                left = mid + 1;
            }
        }
        return ans;
    }
};

############################
Union Find - disjoint set
############################

class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int row = heights.size();
        int col = heights[0].size();
        if (row == 1 && col == 1) return 0;
        UnionFind unionFind(heights);
        auto compareInterval=[](const Edge& p1, const Edge& p2)
    {
        return p1.difference<p2.difference;
    };
        vector<Edge> edgeList = unionFind.edgeList;
        sort(edgeList.begin(), edgeList.end(), compareInterval);

        for (int i = 0; i < edgeList.size(); i++) 
        {
            int x = edgeList[i].x;
            int y = edgeList[i].y;
            unionFind.makeUnion(x, y);
            if (unionFind.find(0) == unionFind.find(row * col - 1))
                return edgeList[i].difference;
        }//for edgeList
        return -1;
    }//minimumEffortPath

    class Edge {
    public:
        int x, y;
        int difference;

        Edge(int x, int y, int difference) {
            this->x = x;
            this->y = y;
            this->difference = difference;
        }
    };//Edge class

    /*//command out the old version
    static bool compareInterval(const Edge& p1, const Edge& p2) {
        return (p1.difference < p2.difference);
    }
    */
   


    class UnionFind {
    public:
        vector<int> parent;
        vector<int> rank;
        vector<Edge> edgeList;

        UnionFind(vector<vector<int>>& heights) {
            int row = heights.size();
            int col = heights[0].size();
            parent.assign(row * col, 0);
            rank.assign(row * col, 0);
            for (int currentRow = 0; currentRow < row; currentRow++) {
                for (int currentCol = 0; currentCol < col; currentCol++) {
                    if (currentRow > 0) 
                    {
                        edgeList.push_back(
                            Edge(currentRow * col + currentCol,
                                 (currentRow - 1) * col + currentCol,
                                 abs(heights[currentRow][currentCol] -
                                     heights[currentRow - 1][currentCol])));
                    }
                    if (currentCol > 0) 
                    {
                        edgeList.push_back(
                            Edge(currentRow * col + currentCol,
                                 currentRow * col + currentCol - 1,
                                 abs(heights[currentRow][currentCol] -
                                     heights[currentRow][currentCol - 1])));
                    }
                    parent[currentRow * col + currentCol] =
                        currentRow * col + currentCol;
                }//for col
            }//for row
        }//UnionFind function

        int find(int i) 
        {
            if (parent[i] != i) parent[i] = find(parent[i]);
            return parent[i];
        }//find

        void makeUnion(int x, int y) 
        {
            int parentX = find(x);
            int parentY = find(y);
            if (parentX != parentY) 
            {
                if (rank[parentX] > rank[parentY])
                    parent[parentY] = parentX;
                else if (rank[parentX] < rank[parentY])
                    parent[parentX] = parentY;
                else 
                {
                    parent[parentY] = parentX;
                    rank[parentX] += 1;
                }//else
            }//if parentX!=parentY
        }//makeUnion
    };//class Union
};
