////My solution: dynamic programming, the same idea of problem 1143 (Longest Common Subsequence)
class Solution {
public:
    int minDistance(string word1, string word2) {
        int common=commonsubs(word1,word2);
        //std::cout<<common<<std::endl;
        return word1.size()+word2.size()-2*common;     
    }
    int commonsubs(string word1, string word2)
    {
        int m=word1.size();
        int n=word2.size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        for(int i=1;i<=m;i++)
        {
            char c1=word1[i-1];
            for(int j=1;j<=n;j++)
            {
                char c2=word2[j-1];
                if(c1==c2)
                {
                    dp[i][j]=dp[i-1][j-1]+1;
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
                
            }//for j
        }//for i
        return dp[m][n];
    }//commonsubs
};

################################################################
The solution in the solution part: directly dynamic programming
################################################################
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        vector<vector<int>> dp(m+1,vector(n+1,0));
        for(int i=1;i<=m;i++)
        {
            dp[i][0]=i;
        }//for i
        for(int j=1;j<=n;j++)
        {
            dp[0][j]=j;
        }
        for(int i=1;i<=m;i++)
        {
            char c1=word1[i-1];
            for(int j=1;j<=n;j++)
            {
                char c2=word2[j-1];
                if(c1==c2)
                {
                    dp[i][j]=dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=min(dp[i-1][j],dp[i][j-1])+1;
                }
            }//for j
        }//fori
        return dp[m][n];
        
    }
};
