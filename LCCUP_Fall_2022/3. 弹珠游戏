欢迎各位来到「力扣嘉年华」，接下来将为各位介绍在活动中广受好评的弹珠游戏。

N*M 大小的弹珠盘的初始状态信息记录于一维字符串型数组 plate 中，数组中的每个元素为仅由 "O"、"W"、"E"、"." 组成的字符串。其中：

    "O" 表示弹珠洞（弹珠到达后会落入洞中，并停止前进）；
    "W" 表示逆时针转向器（弹珠经过时方向将逆时针旋转 90 度）；
    "E" 表示顺时针转向器（弹珠经过时方向将顺时针旋转 90 度）；
    "." 表示空白区域（弹珠可通行）。

游戏规则要求仅能在边缘位置的 空白区域 处（弹珠盘的四角除外）沿 与边缘垂直 的方向打入弹珠，并且打入后的每颗弹珠最多能 前进 num 步。请返回符合上述要求且可以使弹珠最终入洞的所有打入位置。你可以 按任意顺序 返回答案。

注意：

    若弹珠已到达弹珠盘边缘并且仍沿着出界方向继续前进，则将直接出界。
    
    
    
#include <bits/stdc++.h>
using namespace std;
const int fx[] = {-1, 0, 1, 0};
const int fy[] = {0, 1, 0, -1};
const int INF = 1e9;
class Solution {
	int ans[1010][1010][4];
	vector <string> qwq;
	int n, m;
	int dfs(int x, int y, int d) {
		if (x < 0 || y < 0 || x >= n || y >= m) return INF;
		if (qwq[x][y] == 'O') return 0;
		if (ans[x][y][d] != 0) return ans[x][y][d];
		int &ret = ans[x][y][d];
		if (qwq[x][y] == 'W') d = (d + 3) % 4;
		if (qwq[x][y] == 'E') d = (d + 1) % 4;
		x += fx[d], y += fy[d];
		ret = dfs(x, y, d);
		if (ret != INF) ret++;
		return ret;
	}
public:
    vector<vector<int>> ballGame(int num, vector<string>& plate) {
		qwq = plate;
		n = qwq.size(), m = qwq[0].size();
		vector < vector <int> > ans;
		for (int i = 1; i < m - 1; i++) if (qwq[0][i] == '.' && dfs(0, i, 2) <= num) ans.push_back({0, i});
		for (int i = 1; i < m - 1; i++) if (qwq[n - 1][i] == '.' && dfs(n - 1, i, 0) <= num) ans.push_back({n - 1, i});
		for (int i = 1; i < n - 1; i++) if (qwq[i][0] == '.' && dfs(i, 0, 1) <= num) ans.push_back({i, 0});
		for (int i = 1; i < n - 1; i++) if (qwq[i][m - 1] == '.' && dfs(i, m - 1, 3) <= num) ans.push_back({i, m - 1});
		return ans;
    }
};
