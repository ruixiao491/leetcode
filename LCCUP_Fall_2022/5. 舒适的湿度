力扣嘉年华为了确保更舒适的游览环境条件，在会场的各处设置了湿度调节装置，这些调节装置受控于总控室中的一台控制器。
控制器中已经预设了一些调节指令，整数数组operate[i] 表示第 i 条指令增加空气湿度的大小。现在你可以将任意数量的指令修改为降低湿度（变化的数值不变），以确保湿度尽可能的适宜：

    控制器会选择 一段连续的指令 ，从而进行湿度调节的操作；
    这段指令最终对湿度影响的绝对值，即为当前操作的「不适宜度」
    在控制器所有可能的操作中，最大 的「不适宜度」即为「整体不适宜度」

请返回在所有修改指令的方案中，可以得到的 最小 「整体不适宜度」。

示例 1：

    输入：operate = [5,3,7]

    输出：8

    解释：对于方案 2 的 [5,3,-7]
    操作指令 [5],[3],[-7] 的「不适宜度」分别为 5,3,7
    操作指令 [5,3],[3,-7] 的「不适宜度」分别为 8,4
    操作指令 [5,3,-7] 的「不适宜度」为 1，
    因此对于方案 [5,3,-7]的「整体不适宜度」为 8，其余方案的「整体不适宜度」均不小于 8，如下表所示：
    
    
    

    输入：operate = [20,10]

    输出：20

    
    ###############################################
    The solution of others
    ###############################################
    #include <bits/stdc++.h>
using namespace std;
class Solution {
	int dp[1010][4010];
	int n, a[1010], m = 2000;
	int check(int x) {
		for (int i = 1; i <= n; i++) {
			for (int j = 0; j <= x; j++) dp[i][j] = x + 1;
			for (int j = 0; j <= x; j++) if (dp[i - 1][j] <= x) {
				int L = j, R = dp[i - 1][j];
				L += a[i], R = max(0, R - a[i]);
				if (L <= x && R <= x) dp[i][L] = min(dp[i][L], R);
				R = j, L = dp[i - 1][j];
				L += a[i], R = max(0, R - a[i]);
				if (L <= x && R <= x) dp[i][L] = min(dp[i][L], R);
			}
		}
		for (int j = 0; j <= x; j++) if (dp[n][j] <= x) return 1;
		return 0;
	}
public:
    int unSuitability(vector<int>& operate) {
		n = operate.size();
		for (int i = 1; i <= n; i++) a[i] = operate[i - 1];
		int L = 0, R = m, ans = m + 1;
		while (L <= R) {
			int mid = L + R >> 1;
			if (check(mid)) R = mid - 1, ans = mid;
			else L = mid + 1;
		}
		return ans;

    }
};
