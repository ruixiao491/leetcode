力扣嘉年华」的中心广场放置了一个巨型的二叉树形状的装饰树。每个节点上均有一盏灯和三个开关。节点值为 0 表示灯处于「关闭」状态，节点值为 1 表示灯处于「开启」状态。每个节点上的三个开关各自功能如下：

    开关 1：切换当前节点的灯的状态；
    开关 2：切换 以当前节点为根 的子树中，所有节点上的灯的状态，；
    开关 3：切换 当前节点及其左右子节点（若存在的话） 上的灯的状态；

给定该装饰的初始状态 root，请返回最少需要操作多少次开关，可以关闭所有节点的灯。


##############################
The solution of others
##############################
class Solution {
	struct node {
		int a[4];
		int& operator [] (int x) { return a[x]; } 
	};
	node dfs(TreeNode *cur) {
		if (cur == NULL) return {0, 0, 0, 0};
		node l = dfs(cur -> left), r = dfs(cur -> right);
		node ans;
		int k = cur -> val;
		for (int i = 0; i < 4; i++) ans[i] = l[i & 1] + r[i & 1] + (k ^ (i == 1 || i == 2));
		swap(l[0], l[1]), swap(l[2], l[3]);
		swap(r[0], r[1]), swap(r[2], r[3]);
		k ^= 1;
		for (int i = 0; i < 4; i++) ans[i] = min(ans[i], l[i & 1] + r[i & 1] + (k ^ (i == 1 || i == 2)) + 1);
		swap(l[0], l[2]), swap(l[1], l[3]);
		swap(r[0], r[2]), swap(r[1], r[3]);
		k ^= 1;
		for (int i = 0; i < 4; i++) ans[i] = min(ans[i], l[i & 1] + r[i & 1] + (k ^ (i == 1 || i == 2)) + 2);
		swap(l[0], l[1]), swap(l[2], l[3]);
		swap(r[0], r[1]), swap(r[2], r[3]);
		k ^= 1;
		for (int i = 0; i < 4; i++) ans[i] = min(ans[i], l[i & 1] + r[i & 1] + (k ^ (i == 1 || i == 2)) + 1);
		return ans;
	}
public:
    int closeLampInTree(TreeNode* root) {
		node qwq = dfs(root);
		return qwq[0];
    }
};
