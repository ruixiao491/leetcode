class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        if(target=="0000") return 0;
        set<string> seen;
        for(int i=0;i<deadends.size();i++)
        {
            seen.insert(deadends[i]);
            if(deadends[i]=="0000")
            {
                return -1;
            }
        }
        
        vector<int> dir={+1,-1};
        set<string> visit;
        string start="0000";
        queue<string> que;
        que.push(start);
        visit.insert(start);
        int ans=0;
        while(!que.empty())
        {
            int length=que.size();
            for(int i=0;i<length;i++)
            {
                string cur=que.front();
                //std::cout<<cur<<std::endl;
                if(cur==target)
                {
                    return ans;
                }
                que.pop();
                for(int j=0;j<4;j++)
                {
                    for(int k=0;k<2;k++)
                    {
                        int new_digit=(cur[j]-'0'+dir[k]+10)%10;
                        string test=cur;
                        test[j]=new_digit+'0';
                        if(visit.find(test)==visit.end()&&seen.find(test)==seen.end())
                        {
                            que.push(test);
                            visit.insert(test);
                        }//if
                    }//k
                }//for j
            }//i
            ans++;
        }//while
        return -1;
        
    }
};
