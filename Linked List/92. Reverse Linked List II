/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/*
//recursive.
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(m>1)
            head->next=reverseBetween(head->next,m-1,n-1);
        else{
            ListNode* prev=NULL;
            ListNode* tail=head;
            int nodesToReverse=n-m+1;
            while(nodesToReverse--){
                ListNode* next=head->next;
                head->next=prev;
                prev=head;
                head=next;
            }
            tail->next=head;
            return prev;
        }
        return head;
        
    }
};
*/



//iterative Link Reversal
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        //Empty list
        if(head==nullptr)
        {
            return nullptr;
        }//if
        //Move the pointers until they reach the proper starting point
        ListNode* cur=head, *prev=nullptr;
        while(m>1)
        {
            prev=cur;
            cur=cur->next;
            m--;
            n--;
        }//while
        ListNode *con=prev, *tail=cur;
        //Iteratively reverse the nodes until n becomes 0.
        ListNode *third=nullptr;
        while(n>0)
        {
            third=cur->next;
            cur->next=prev;
            prev=cur;
            cur=third;
            n--;
        }//while n>0
        //Adjust the final connections as explained in the algorithm
        if(con != nullptr)
        {
            con->next=prev;
        }
        else
        {
            head=prev;
        }
        tail->next=cur;
        return head;
        
        
    }
};


///Solutions in Chinese version (I think it is much better)
//Solution 1:  方法一：穿针引线
class Solution {
private:
    void reverseLinkedList(ListNode *head) {
        // 也可以使用递归反转一个链表
        ListNode *pre = nullptr;
        ListNode *cur = head;

        while (cur != nullptr) {
            ListNode *next = cur->next;
            cur->next = pre;
            pre = cur;
            cur = next;
        }
    }

public:
    ListNode *reverseBetween(ListNode *head, int left, int right) {
        // 因为头节点有可能发生变化，使用虚拟头节点可以避免复杂的分类讨论
        ListNode *dummyNode = new ListNode(-1);
        dummyNode->next = head;

        ListNode *pre = dummyNode;
        // 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点
        // 建议写在 for 循环里，语义清晰
        for (int i = 0; i < left - 1; i++) {
            pre = pre->next;
        }

        // 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点
        ListNode *rightNode = pre;
        for (int i = 0; i < right - left + 1; i++) {
            rightNode = rightNode->next;
        }

        // 第 3 步：切断出一个子链表（截取链表）
        ListNode *leftNode = pre->next;
        ListNode *curr = rightNode->next;

        // 注意：切断链接
        pre->next = nullptr;
        rightNode->next = nullptr;

        // 第 4 步：同第 206 题，反转链表的子区间
        reverseLinkedList(leftNode);

        // 第 5 步：接回到原来的链表中
        pre->next = rightNode;
        leftNode->next = curr;
        return dummyNode->next;
    }
};



///Solution2: 一次遍历「穿针引线」反转链表（头插法）

class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int left, int right) {
        // 设置 dummyNode 是这一类问题的一般做法
        ListNode *dummyNode = new ListNode(-1);
        dummyNode->next = head;
        ListNode *pre = dummyNode;
        for (int i = 0; i < left - 1; i++) {
            pre = pre->next;
        }
        ListNode *cur = pre->next;
        ListNode *next;
        for (int i = 0; i < right - left; i++) {
            next = cur->next;
            cur->next = next->next;
            next->next = pre->next;
            pre->next = next;
        }
        return dummyNode->next;
    }
};

