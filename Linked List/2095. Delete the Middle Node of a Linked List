/////My solution: slow and fast pointers
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        ListNode* slow=head;
        ListNode* fast=head;
        ListNode* prev=nullptr;
        while(fast!=nullptr&&fast->next!=nullptr)
        {
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }//while
        if(prev!=nullptr)
        {
           prev->next=slow->next; 
        }
        else
        {
            return nullptr;
        }
        //std::cout<<slow->val<<" "<<slow->next->val<<std::endl;
        return head;
        
    }
};

###########################################
The solution in the solution part: passes
###########################################
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        // Edge case: return None if there is only one node
        if (head -> next == nullptr)
            return nullptr;
        
        int count = 0;
        ListNode *p1 = head, *p2 = head;
        
        // First pass, count the number of nodes in the linked list using 'p1'.
        while (p1 != nullptr) {
            count++;
            p1 = p1 -> next;
        }
        
        // Get the index of the node to be deleted.
        int middleIndex = count / 2;
        
        // Second pass, let 'p2' move toward the predecessor of the middle node.
        for (int i = 0; i < middleIndex - 1; ++i)
            p2 = p2 -> next;
        
        // Delete the middle node and return 'head'.
        p2 -> next = p2 -> next -> next;
        return head;
    }
};


##############################################################################################
The solution in the solution part: fast and slow pointers (better than mine, I use 3 pointers)
##############################################################################################
class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
        // Edge case: return nullptr if there is only one node.
        if (head -> next == nullptr)
            return nullptr;
        
        // Initialize two pointers, 'slow' and 'fast'.
        ListNode *slow = head, *fast = head -> next -> next;
        
        // Let 'fast' move forward by 2 nodes, 'slow' move forward by 1 node each step.
        while (fast != nullptr && fast -> next != nullptr) {
            slow = slow -> next;
            fast = fast -> next -> next;
        }
        
        // When 'fast' reaches the end, remove the next node of 'slow' and return 'head'.
        slow -> next = slow -> next -> next;
        return head;
    }
};
