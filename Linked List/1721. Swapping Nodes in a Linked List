##############################################################################################################################
need to pay attention to the problem description. The description states: changing the values, instead of changing the nodes
##############################################################################################################################
//My solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode* dummyHead=new ListNode(0,head);
        int length=0;
        ListNode* cur=dummyHead->next;
        while(cur!=nullptr)
        {
            length++;
            cur=cur->next;
        }
        if(length==1)
        {
            return dummyHead->next;
        }
        int count=1;
        cur=dummyHead->next;
        while(count<k)
        {
            count++;
            cur=cur->next;
        }
        ListNode* first=cur;
        count=1;
        cur=dummyHead->next;
        while(count<length-k+1)
        {
            count++;
            cur=cur->next;
        }//while
        ListNode* second=cur;
        swap(first->val, second->val);
           
        return dummyHead->next;
        
        
        
        
    }
};


########One pass solution in the solution part of English version
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        int listLength = 0;
        ListNode* frontNode = nullptr;
        ListNode* endNode = nullptr;
        ListNode* currentNode = head;
        // set the front node and end node in single pass
        while (currentNode) {
            listLength++;
             if(endNode != NULL) {
                endNode = endNode->next;
             }
            // check if we have reached kth node
            if (listLength == k) {
                frontNode = currentNode;
                endNode = head;
            }          
            currentNode = currentNode->next;
        }
        // swap the values of front node and end node
        swap(frontNode->val, endNode->val);
        return head;
    }
};
