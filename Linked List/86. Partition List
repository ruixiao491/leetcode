//My solution similar to Problem 92:
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* dummyHead=new ListNode(0);
        dummyHead->next=head;
                
        ListNode* cur=head;
        ListNode* prev=dummyHead;
        while(cur!=nullptr&&(cur->val<x))
        {
            prev=cur;
            cur=cur->next;
        }//while
        ListNode* first=cur;//the first greater or equal to x
        //prev is the one before first
        //std::cout<<"check:  "<<prev->val<<"  "<<first->val<<std::endl;

          while(cur!=nullptr&&cur->next!=nullptr)
          {
            ListNode *next=cur->next;
            //std::cout<<"check: "<<next->val<<std::endl;
            if(next->val<x)
            {
                ListNode *second=next->next;
                cur->next=second;
                prev->next=next;
                next->next=first;
                prev=next;
                cur=cur;
            }//if
            else
            {
               cur=cur->next; 
            }
            
        }//while    
        return dummyHead->next;
        
    }
};




////The solution in the solution part: two pointers solution:
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* small = new ListNode(0);
        ListNode* smallHead = small;
        ListNode* large = new ListNode(0);
        ListNode* largeHead = large;
        while (head != nullptr) {
            if (head->val < x) {
                small->next = head;
                small = small->next;
            } else {
                large->next = head;
                large = large->next;
            }
            head = head->next;
        }
        large->next = nullptr;
        small->next = largeHead->next;
        return smallHead->next;
    }
};
