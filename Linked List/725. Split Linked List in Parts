My solution (which is simiar to the solution in the solution part)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        vector<ListNode*> ans;
        //find the length
        int length=0;
        ListNode* cur=head;
        while(cur!=nullptr)
        {
            length++;
            cur=cur->next;
        }//while
        if(length<k)
        {
            cur=head;
            while(cur!=nullptr)
            {
                ListNode* next=cur->next;
                cur->next=nullptr;
                ans.push_back(cur);
                cur=next;
                k--;
            }
            while(k>0)
            {
                ans.push_back(nullptr);
                k--;
            }
            return ans;
        }//if length<k
        int smallsize=length/k;
        int numbers=length%k;
        cur=head;
        int counts=0;
        ListNode* dummyHead =  new ListNode(0);
        ListNode* test=dummyHead;
        while(cur!=nullptr&&counts<(smallsize+1)*numbers)
        {
            test->next=cur;
            test=test->next;
            counts++;
            cur=cur->next;
            //std::cout<<"test1: "<<test->next->val<<"counts:  "<<counts<<std::endl;
            if(counts%(smallsize+1)==0)
            {
                //std::cout<<"test2: "<<dummyHead->next->val<<"    "<<test->val<<std::endl;
                test->next=nullptr;
                //std::cout<<"test2: "<<dummyHead->next->next->next->next->val<<std::endl;
                ans.push_back(dummyHead->next);
                dummyHead->next=nullptr;
                test=dummyHead;
            }
            
        }//while
        counts=0;
        while(cur!=nullptr)
        {
            test->next=cur;
            counts++;
            test=test->next;
            cur=cur->next;
            if(counts%smallsize==0)
            {
                test->next=nullptr;
                ans.push_back(dummyHead->next);
                dummyHead->next=nullptr;
                test=dummyHead;
            }
        }//while
        return ans;       
        
    }
};



######################
The solution in the solution part:
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int n = 0;
        ListNode *temp = head;
        while (temp != nullptr) {
            n++;
            temp = temp->next;
        }
        int quotient = n / k, remainder = n % k;

        vector<ListNode*> parts(k,nullptr);
        ListNode *curr = head;
        for (int i = 0; i < k && curr != nullptr; i++) {
            parts[i] = curr;
            int partSize = quotient + (i < remainder ? 1 : 0);
            for (int j = 1; j < partSize; j++) {
                curr = curr->next;
            }
            ListNode *next = curr->next;
            curr->next = nullptr;
            curr = next;
        }
        return parts;
    }
};

