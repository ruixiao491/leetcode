///My solution:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    void reverseLinkedList(ListNode *head){
        ListNode *pre=nullptr;
        ListNode *cur=head;
        while(cur!=nullptr)
        {
            ListNode *next=cur->next;
            cur->next=pre;
            pre=cur;
            cur=next;
        }//while
    }//reverseLinkedList

    
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *dummyHead = new ListNode(0);
        ListNode *pre=dummyHead;
        ListNode *cur=head;
        int length=0;
        int counts=1;
        ///find the length
        while(cur!=nullptr)
        {
            length++;
            cur=cur->next;
        }//while
        int turns=length/k;
        //begin to reverse
        cur=head;
        while(cur!=nullptr&&counts<=turns*k)
        {
            ListNode* rightNode=cur;
            while(counts%k!=0)
            {
                //std::cout<<"second check:  "<<rightNode->val<<std::endl;
                counts++;
                rightNode=rightNode->next;            
            }
            ListNode* next=rightNode->next;
            rightNode->next=nullptr;
            reverseLinkedList(cur);
            pre->next=rightNode;
            while(pre->next!=nullptr)
            {
                pre=pre->next;
            }
            cur->next=next;
            //std::cout<<"counts:  "<<counts<<"check 1st:  "<<next->val<<std::endl;
            cur=cur->next; 
            counts++;
        }//while
        return dummyHead->next;        
        
    }
};
