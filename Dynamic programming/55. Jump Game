///My solution:
class Solution {
public:
    bool canJump(vector<int>& nums) {
        vector<int> dp(nums.size(),0);
        dp[0]=1;
        for(int i=0; i<nums.size();i++)
        {
            if(dp[i]==1)
            {
                if(i+nums[i]>=nums.size())
                {
                    return true;
                    break;
                }
                for(int j=1;j<=nums[i];j++)
                {
                    dp[i+j]=1;
                }
            }//if
            else
            {
                return false;
                break;
            }
            
        }//for
        return true;
        
        
    }
};


##########################################
The solution in the solution part: Greedy
##########################################
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int lastPos=nums.size()-1;
        for(int i=nums.size()-2;i>=0;i--)
        {
            if(i+nums[i]>=lastPos)
            {
                lastPos=i;
            }//if
        }//for
        return lastPos==0;
    }
};
