///My solution: dynamic programming
class Solution {
public:
    int longestValidParentheses(string s) {
        int n=s.size();
        vector<int> dp(n,0);
        int ans=0;
        for(int i=1;i<s.size();i++)
        {
            if(s[i]=='(') continue;
            if(s[i-1]=='('&&i-2>=0)
            {
                dp[i]=dp[i-2]+2;
            }//if
            else
            {
                if(i-dp[i-1]-1>=0&&s[i-dp[i-1]-1]=='(')
                {
                    dp[i]=dp[i-1]+2;
                    if(i-dp[i-1]-2>=0)
                    {
                        dp[i]+=dp[i-dp[i-1]-2];
                    }
                }
            }//else
            ans=max(ans,dp[i]);
        }//fori
        return ans;
    }
};


##############################################################
The solution in the solution part: with o(1) space complexity
##############################################################
public:
    int longestValidParentheses(string s) {
        int left = 0, right = 0, maxlength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s[i] == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = max(maxlength, 2 * right);
            } else if (right > left) {
                left = right = 0;
            }
        }
        left = right = 0;
        for (int i = (int)s.length() - 1; i >= 0; i--) {
            if (s[i] == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxlength = max(maxlength, 2 * left);
            } else if (left > right) {
                left = right = 0;
            }
        }
        return maxlength;
    }
};

