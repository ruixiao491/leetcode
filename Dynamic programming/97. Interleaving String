##########################################################
The solution in the solution part: 2D dynamic programming
##########################################################
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        auto f = vector < vector <int> > (s1.size() + 1, vector <int> (s2.size() + 1, false));

        int n = s1.size(), m = s2.size(), t = s3.size();

        if (n + m != t) {
            return false;
        }

        f[0][0] = true;
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= m; ++j) {
                int p = i + j - 1;
                if (i > 0) {
                    f[i][j] |= (f[i - 1][j] && s1[i - 1] == s3[p]);
                }
                if (j > 0) {
                    f[i][j] |= (f[i][j - 1] && s2[j - 1] == s3[p]);
                }
            }
        }

        return f[n][m];
    }
};

#########################################################
The solution in the solution part: 1D dynamic programming
#########################################################
class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        auto f = vector <int> (s2.size() + 1, false);

        int n = s1.size(), m = s2.size(), t = s3.size();

        if (n + m != t) {
            return false;
        }

        f[0] = true;
        for (int i = 0; i <= n; ++i) {
            for (int j = 0; j <= m; ++j) {
                int p = i + j - 1;
                if (i > 0) {
                    f[j] &= (s1[i - 1] == s3[p]);
                }
                if (j > 0) {
                    f[j] |= (f[j - 1] && s2[j - 1] == s3[p]);
                }
            }
        }

        return f[m];
    }
};


#####################################################
Modified the solution 2 a bit: 1D dynamic programming
#####################################################
 class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m=s1.size();
        int n=s2.size();
        int k=s3.size();
        if(k!=m+n)
        {
            return false;
        }
        vector<int> dp(n+1,0);
        for(int i=0;i<=m;i++)
        {
            for(int j=0;j<=n;j++)
            {
                if(i==0&&j==0)
                {
                    dp[j]=true;
                }
                else if(i==0)
                {
                    dp[j]=dp[j-1]&&s2[j-1]==s3[i+j-1];
                }
                else if(j==0)
                {
                    dp[j]=dp[j]&&s1[i-1]==s3[i+j-1];
                }
                else
                {
                    dp[j]=(dp[j]&&s1[i-1]==s3[i+j-1])||(dp[j-1]&&s2[j-1]==s3[i+j-1]);
                }
                
            }//for j
        }//for i
        return dp[n];
    }
};
