///My solution: dynamic programming
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        if(n==1)
        {
            return 1;
        }
        //int ans=1;
        vector<vector<int>> dp(n+1,vector<int>(n+1,1));
        for(int i=n;i>0;i--)
        {
            for(int j=i+1;j<=n;j++)
            {
                if(s[i-1]==s[j-1])
                {
                    if(i+1<=j-1)
                    {
                        dp[i][j]=dp[i+1][j-1]+2;
                    }//if 
                    else
                    {
                        dp[i][j]=2;
                    }
                }//if ==
                else
                {
                    dp[i][j]=max(max(dp[i+1][j],dp[i][j]),dp[i][j-1]);
                }
                //std::cout<<i<<" "<<j<<"  "<<dp[i][j]<<std::endl;
                //ans=max(ans,dp[i][j]);
            }//for j
        }//for i
        //return ans;
        return dp[1][n];
        
    }
    
};
