//My solution: BFS
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> path(m,vector<int>(n,INT_MAX));
        path[0][0]=grid[0][0];
        vector<vector<int>> dir={{1,0},{0,1}};
        queue<pair<int,int>> que1;
        queue<int> que2;
        que1.push({0,0});
        while(!que1.empty())
        {
            auto it=que1.front();
            que1.pop();
            int cur_sum=path[it.first][it.second];
            for(int i=0;i<2;i++)
            {
                int new_row=it.first+dir[i][0];
                int new_col=it.second+dir[i][1];
                if(new_row>=0&&new_row<m&&new_col>=0&&new_col<n)
                {
                    if(cur_sum+grid[new_row][new_col]<path[new_row][new_col])
                    {
                        path[new_row][new_col]=cur_sum+grid[new_row][new_col];
                        que1.push({new_row,new_col});   
                    }//if
                }//if
            }//for i
            
        }//while
        return path[m-1][n-1];
    }
};


######################################################
The solution in the solution part: dynamic programming
######################################################

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n));
        dp[0][0]=grid[0][0];
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0&&j!=0)
                {
                    dp[i][j]=dp[i][j-1]+grid[i][j];
                }
                else if(i!=0&&j==0)
                {
                    dp[i][j]=dp[i-1][j]+grid[i][j];
                }
                else if(i!=0&&j!=0)
                {
                    dp[i][j]=grid[i][j]+min(dp[i-1][j],dp[i][j-1]);
                }
            }//for j
        }//for i
        return dp[m-1][n-1];
    }
};



#################################################################################
The solution in the solution part: optimized space complexity dynamic programming
#################################################################################

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0&&j!=0)
                {
                    grid[i][j]=grid[i][j]+grid[i][j-1];
                }
                else if(j==0&&i!=0)
                {
                    grid[i][j]=grid[i][j]+grid[i-1][j];
                }
                else if(i!=0&&j!=0)
                {
                    grid[i][j]=grid[i][j]+min(grid[i-1][j],grid[i][j-1]);
                }
            }//for j
        }//for i
        return grid[m-1][n-1];
    
    }
};
