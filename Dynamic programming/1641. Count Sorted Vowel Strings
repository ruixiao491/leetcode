///My solution DP
//dp[n][a]=dp[n-1][a]+dp[n-1][e]+dp[n-1][i]+dp[n-1][o]+dp[n-1][u]
//dp[n][e]=dp[n-1][e]+dp[n-1][i]+dp[n-1][o]+dp[n-1][u]
//dp[n][i]=dp[n-1][i]+dp[n-1][o]+dp[n-1][u]
//dp[n][o]=dp[n-1][o]+dp[n-1][u]
//dp[n][u]=dp[n-1][u]

class Solution {
public:
    int countVowelStrings(int n) {
        vector<vector<int>>dp(n,vector<int>(5));
        for(int i=0;i<5;i++)
        {
            dp[0][i]=1;
        }
        if(n==1)
        {
            return 5;
        }
        for(int i=1;i<n;i++)
        {
            dp[i][0]=dp[i-1][0]+dp[i-1][1]+dp[i-1][2]+dp[i-1][3]+dp[i-1][4];
            dp[i][1]=dp[i-1][1]+dp[i-1][2]+dp[i-1][3]+dp[i-1][4];
            dp[i][2]=dp[i-1][2]+dp[i-1][3]+dp[i-1][4];
            dp[i][3]=dp[i-1][3]+dp[i-1][4];
            dp[i][4]=dp[i-1][4];
        }//for i
        
        return dp[n-1][0]+dp[n-1][1]+dp[n-1][2]+dp[n-1][3]+dp[n-1][4];       
    }
};

##################################
The solution in the solution part
##################################
////backtrack
class Solution {
public:
    int countVowelStrings(int n) {
        return backtrack(n,0);
        
    }
    
    int backtrack(int n, int start)
    {
        if(n==0)
        {
            return 1;
        }
        int result=0;
        for(int i=start;i<5;i++)
        {
            result+=backtrack(n-1,i);
        }//for
        return result;
    }
};
