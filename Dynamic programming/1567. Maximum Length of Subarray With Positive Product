///My solution:
class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        if(nums.size()==1)
        {
            return nums[0]>0;
        }
        int ans=INT_MIN;
        vector<int> pos_length(nums.size());
        vector<int> min_length(nums.size());
        if(nums[0]>0)
        {
            pos_length[0]=1;
            min_length[0]=0;
        }
        else if(nums[0]<0)
        {
            pos_length[0]=0;
            min_length[0]=1;
        }
        else
        {
            pos_length[0]=0;
            min_length[0]=0;
        }
        
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
                pos_length[i]=pos_length[i-1]+1;
                if(min_length[i-1]!=0)
                {
                    min_length[i]=min_length[i-1]+1;
                }
                else
                {
                    min_length[i]=0;
                }
            }//if num>0
            else if(nums[i]<0)
            {
                if(min_length[i-1]!=0)
                {
                    pos_length[i]=min_length[i-1]+1;
                }
                else
                {
                    pos_length[i]=0;
                }
                min_length[i]=pos_length[i-1]+1;
            }
            else
            {
                pos_length[i]=0;
                min_length[i]=0;
            }
            
            
            
        }//for
        
        for(int i=0;i<pos_length.size();i++)
        {
            //std::cout<<pos_length[i]<<std::endl;
            ans=max(ans,pos_length[i]);  
        }//for pos
        return ans;
    }
};




###########################################################################
The first solution in the solution part of Chinese version(similar to mine)
###########################################################################
class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int length = nums.size();
        vector<int> positive(length), negative(length);
        if (nums[0] > 0) {
            positive[0] = 1;
        }
        else if (nums[0] < 0) {
            negative[0] = 1;
        }
        int maxLength = positive[0];
        for (int i = 1; i < length; ++i) {
            if (nums[i] > 0) {
                positive[i] = positive[i - 1] + 1;
                negative[i] = (negative[i - 1] > 0 ? negative[i - 1] + 1 : 0);
            }
            else if (nums[i] < 0) {
                positive[i] = (negative[i - 1] > 0 ? negative[i - 1] + 1 : 0);
                negative[i] = positive[i - 1] + 1;
            }
            else {
                positive[i] = 0;
                negative[i] = 0;
            }
            maxLength = max(maxLength, positive[i]);
        }
        return maxLength;
    }
};

#####################################################
The second solution, optimized the space complexity 
#####################################################
class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int length = nums.size();
        int positive = (nums[0] > 0);
        int negative = (nums[0] < 0);
        int maxLength = positive;
        for (int i = 1; i < length; ++i) {
            if (nums[i] > 0) {
                ++positive;
                negative = (negative > 0 ? negative + 1 : 0);
            }
            else if (nums[i] < 0) {
                int newPositive = negative > 0 ? negative + 1 : 0;
                int newNegative = positive + 1;
                tie(positive, negative) = {newPositive, newNegative};
            }
            else {
                positive = negative = 0;
            }
            maxLength = max(maxLength, positive);
        }
        return maxLength;
    }
};


