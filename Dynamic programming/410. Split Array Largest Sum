//////////Dynamic programming
class Solution {
public:
    int splitArray(vector<int>& nums, int m) {
        int n=nums.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,INT_MAX));
        dp[0][0]=0;
        vector<int> sum(n+1,0);
        for(int i=1;i<=n;i++)
        {
            sum[i]=sum[i-1]+nums[i-1];
        }//for i
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=min(i,m);j++)
            {
                for(int k=j-1;k<i;k++)
                {
                    dp[i][j]=min(dp[i][j],max(dp[k][j-1],sum[i]-sum[k]));
                    
                }//for k
            }//for j
        }//for i
        
        return dp[n][m];
    }
};


############################
Binary search
############################

class Solution {
public:
    bool check(vector<int>& nums, int x, int m) {
        long long sum = 0;
        int cnt = 1;
        for (int i = 0; i < nums.size(); i++) {
            if (sum + nums[i] > x) {
                cnt++;
                sum = nums[i];
            } else {
                sum += nums[i];
            }
        }
        return cnt <= m;
    }

    int splitArray(vector<int>& nums, int m) {
        long long left = 0, right = 0;
        for (int i = 0; i < nums.size(); i++) {
            right += nums[i];
            if (left < nums[i]) {
                left = nums[i];
            }
        }
        while (left < right) {
            long long mid = (left + right) >> 1;
            if (check(nums, mid, m)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
};


