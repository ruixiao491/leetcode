#####
DFS
#####
class Solution {
public:
    vector<vector<int>> ans;
    vector<int> path;
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        dfs(root,targetSum);
        return ans;
        
        
    }
    void dfs(TreeNode* root, int targetSum)
    {
        if(root==nullptr)
        {
            return;
        }
        path.push_back(root->val);
        targetSum-=root->val;
        if(root->left==nullptr&&root->right==nullptr&&targetSum==0)
        {
            ans.push_back(path);
        }
        dfs(root->left,targetSum);
        dfs(root->right,targetSum);
        std::cout<<root->val<<" "<<path.back()<<std::endl;
        path.pop_back();
            
    }//dfs
    
};

####
BFS
####
class Solution {
public:
    vector<vector<int>> ans;
    map<TreeNode*, TreeNode*>seen;
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if(root==nullptr)
        {
            return ans;
        }
        queue<pair<TreeNode*, int>> que;
        que.push({root,root->val});
        while(!que.empty())
        {
            auto it=que.front();
            que.pop();
            if(it.first->left!=nullptr)
            {
                que.push({it.first->left,it.second+it.first->left->val});
                seen[it.first->left]=it.first;
            }
            if(it.first->right!=nullptr)
            {
                que.push({it.first->right,it.second+it.first->right->val});
                seen[it.first->right]=it.first;
            }
            if(it.first->left==nullptr&&it.first->right==nullptr&&it.second==targetSum)
            {
                getPath(it.first);
            }
        }//while
        return ans;
    }
    
    void getPath(TreeNode* node)
    {
        vector<int> test;
        while(node!=nullptr)
        {
            test.push_back(node->val);
            node=seen[node];
        }//while
        reverse(test.begin(),test.end());
        ans.push_back(test);
    }//getPath
};
