#############################################
The solution in the solution part: recursion
#############################################
class Solution {
public:
    map<int,int> seen;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        for(int i=0;i<n;i++)
        {
            seen[inorder[i]]=i;
        }
        return helper(preorder,inorder,0,n-1,0,n-1);
        
        
    }
    TreeNode* helper(vector<int>& preorder, vector<int>& inorder,int pre_left,int pre_right,int in_left, int in_right)
    {
        if(pre_left>pre_right) return nullptr;
        int pre_root=pre_left;
        int in_root=seen[preorder[pre_root]];
        TreeNode* root = new TreeNode(preorder[pre_root]);
        int size_left_subtree=in_root-in_left;
        root->left=helper(preorder,inorder,pre_left+1,pre_left+size_left_subtree,in_left,in_root-1);
        root->right=helper(preorder,inorder,pre_left+size_left_subtree+1,pre_right,in_root+1,in_right);
        return root;
        
    }//helper
};


#############################################
The solution in the solution part: iterative
#############################################
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode* root=new TreeNode(preorder[0]);
        stack<TreeNode*> stk;
        stk.push(root);
        int index=0;
        for(int i=1;i<preorder.size();i++)
        {
            int val=preorder[i];
            if(stk.top()->val!=inorder[index])
            {
                stk.top()->left=new TreeNode(val);
                stk.push(stk.top()->left);
            }//if
            else
            {
                TreeNode* node=stk.top();
                while(!stk.empty()&&stk.top()->val==inorder[index])
                {
                    node=stk.top();
                    stk.pop();
                    index++;
                }//while
                node->right=new TreeNode(val);
                stk.push(node->right);
            }//else  
        }//for i
        return root;
    }
};
