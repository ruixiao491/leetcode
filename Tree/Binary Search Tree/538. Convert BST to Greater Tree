##################################################
The first solution in the solution part: recursion
##################################################
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
class Solution {
public:
    int sum=0;
    TreeNode* convertBST(TreeNode* root) {
        if(root!=nullptr)
        {
            convertBST(root->right);
            sum+=root->val;
            root->val=sum;
            convertBST(root->left);
            
        }//if
        return root;
        
    }
};

################################################
The second solution in the solution part: stack
################################################
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        int sum=0;
        TreeNode* node=root;
        stack<TreeNode*> stk;
        while(!stk.empty()||node!=nullptr)
        {
            while(node!=nullptr)
            {
                stk.push(node);
                node=node->right;
            }//while
            node=stk.top();
            stk.pop();
            sum=sum+node->val;
            //std::cout<<sum<<std::endl;
            node->val=sum;
            node=node->left;
            
        }//while
        return root;
    }
};
