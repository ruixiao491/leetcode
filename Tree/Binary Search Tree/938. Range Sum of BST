///My solution:
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        vector<int> res;
        helper(root,res);
        int start=lower_bound(res.begin(),res.end(),low)-res.begin();
        //std::cout<<start<<std::endl;
        int ans=0;
        for(int i=start;i<res.size();i++)
        {
            if(res[i]<=high)
            {
                ans+=res[i];
            }//if
            else
            {
                break;
            }
        }//for
        return ans;
    }//rangeSumBST
    void helper(TreeNode* root, vector<int>& res)
    {
        if(root==nullptr)
        {
            return;
        }
        helper(root->left,res);
        res.push_back(root->val);
        helper(root->right,res);
    }//helper
};



##########################################
The solution in the solution part: DFS
##########################################
class Solution {
public:
    int rangeSumBST(TreeNode *root, int low, int high) {
        if (root == nullptr) {
            return 0;
        }
        if (root->val > high) {
            return rangeSumBST(root->left, low, high);
        }
        if (root->val < low) {
            return rangeSumBST(root->right, low, high);
        }
        return root->val + rangeSumBST(root->left, low, high) + rangeSumBST(root->right, low, high);
    }
};

###########################################
The solution in the solution part: BFS
###########################################
class Solution {
public:
    int rangeSumBST(TreeNode *root, int low, int high) {
        int sum = 0;
        queue<TreeNode*> q({root});
        while (!q.empty()) {
            auto node = q.front();
            q.pop();
            if (node == nullptr) {
                continue;
            }
            if (node->val > high) {
                q.push(node->left);
            } else if (node->val < low) {
                q.push(node->right);
            } else {
                sum += node->val;
                q.push(node->left);
                q.push(node->right);
            }
        }
        return sum;
    }
};


