/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
//solution1
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        int level=0;
        vector<vector<int>> res;
        if(root==nullptr)
        {
            return res;
        }
        helper(root, level,res);
        return res;
        
    }
public: void helper(TreeNode* root, int level,vector<vector<int>> &res)
{
    if(root==nullptr)
    {
        return;
    }
    if(res.size()-1<level||res.size()==0)
    {
        res.push_back({root->val});
    }
    else
    {
      res[level].push_back(root->val);
    }
    helper(root->left,level+1,res);
    helper(root->right,level+1,res);
    
}
};
*/
//solution2
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        queue<TreeNode*> queue;
        if(root==nullptr)
        {
            return res;
        }
        queue.push(root);
        int level=0;
        while(!queue.empty())
        {
            //number of elements in the current level
            int level_length = queue.size();
            for(int i=0; i<level_length;i++)
            {
                TreeNode *cur = queue.front();
                //std::cout<<cur->val<<"   "<<level<<std::endl;
                //std::cout<<res.size()<<std::endl;
                
                if(res.size()-1<level||res.size()==0)
                {
                    //std::cout<<cur->val<<"   "<<level<<std::endl;
                    res.push_back({cur->val});
                }
                else
                {
                    res[level].push_back(cur->val);
                }
                
                queue.pop();
                if(cur->left!=nullptr)
                {
                   queue.push(cur->left); 
                }
                if(cur->right!=nullptr)
                {
                    queue.push(cur->right);
                }

            }//for i
            level++;
        }//while queue
        return res;
    }
};
