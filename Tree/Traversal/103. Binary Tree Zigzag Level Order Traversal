/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
//solution1 BFS iteration
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) { 
        vector<vector<int>> res;
        int level=0;
        stack<TreeNode*> stk;

        if(root==nullptr)
        {
            return res;
        }
        stk.push(root);
        while(!stk.empty())
        {
            stack<TreeNode*> stk2;
            int stack_length = stk.size();
            for(int i=0; i<stack_length; i++)
            {
               TreeNode* cur;
               cur=stk.top();
               stk.pop();
               //std::cout<<cur->val<<"  "<<level<<std::endl;
               if(res.size()-1<level||res.size()==0)
               {
                    res.push_back({cur->val});
               }//if size=0
               else
               {
                    res[level].push_back(cur->val);
               }//else
               if(level%2==0)
               {
                    if(cur->left!=nullptr)
                    {
                       stk2.push(cur->left);         
                    }
                    if(cur->right!=nullptr)
                    {
                       stk2.push(cur->right);  
                    }


                }//level%2==0
                if(level%2==1)
                {
                    if(cur->right!=nullptr)
                    {
                       stk2.push(cur->right);
                    }
                    if(cur->left!=nullptr)
                    {
                       stk2.push(cur->left);
                    }
                    
                 }//level%2==1
            }//for i
            stk=stk2;
            level++;
            
            
            
        }//while queue
        
        return res;
        
        
    }
};
*/
/*
//solution 2 DFS recurrsion based on java.
class Solution {
public: vector<vector<int>> res;
void helper(TreeNode* root, int level){
    if(root==nullptr)
    {
        return;
    }
    if(res.size()-1<level||res.size()==0)
    {
        res.push_back({root->val});
        std::cout<<root->val<<"  "<<level<<std::endl;
    }
    else
    {
        res[level].push_back(root->val);
    }
    helper(root->left, level+1);
    helper(root->right, level+1);    
}//helper        
    
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        helper(root,0);
        int levels=res.size();
        //std::cout<<levels<<std::endl;
        for(int i=0; i<levels; i++)
        {
            if(i%2==1)
            {
                reverse(res[i].begin(), res[i].end());
            }
        }//for i
        return res;
        
    }
    

};
*/

//solution 3 (same as solution 2) DFS recurrsion based on java.
class Solution {
public: 
void helper(TreeNode* root,vector<vector<int>>&res, int level){
    if(root==nullptr)
    {
        return;
    }
    if(res.size()-1<level||res.size()==0)
    {
        res.push_back({root->val});
        //std::cout<<root->val<<"  "<<level<<std::endl;
    }
    else
    {
        res[level].push_back(root->val);
    }
    helper(root->left,res, level+1);
    helper(root->right,res, level+1);    
}//helper        
    
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        helper(root,res,0);
        int levels=res.size();
        //std::cout<<levels<<std::endl;
        for(int i=0; i<levels; i++)
        {
            if(i%2==1)
            {
                reverse(res[i].begin(), res[i].end());
            }
        }//for i
        return res;
        
    }
    

};
