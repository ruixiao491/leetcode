/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
//solution 1: with swap:
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        helper(root,res,0);
        for(int i=0,j=res.size()-1;i<j;i++,j--)
        {
            swap(res[i],res[j]);
        }        
        return res;        
    }

void helper(TreeNode* root, vector<vector<int>> &res, int level){
    if(root==nullptr)
    {
        return;
    }   
    if (res.size()-1<level||res.size()==0)
    {
        res.push_back({root->val});
        std::cout<<root->val<<"   "<<level<<std::endl;
    }
    else
    {
        std::cout<<root->val<<"   "<<level<<std::endl;
        res[level].push_back(root->val);
    }
    helper(root->left,res,level+1);
    helper(root->right,res,level+1);    
}//helper    
};
*/
//solution2
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        queue<TreeNode*> queues;
        if(root==nullptr)
        {
            return res;
        }
        queues.push(root);
        int level=0;
        while(!queues.empty())
        {
            TreeNode* cur;
            int queue_length=queues.size();
            for(int i=0;i<queue_length;i++)
            {
                cur=queues.front();
                queues.pop(); 
                if(res.size()-1<level||res.size()==0)
                {
                    res.push_back({cur->val});
                }
                else
                {
                    res[level].push_back(cur->val);
                }
                if(cur->left!=nullptr)
                {
                   queues.push(cur->left); 
                }
                if(cur->right!=nullptr)
                {
                   queues.push(cur->right);   
                }                
            }//for i
            level++;          
        }//while queues
        for(int i=0,j=res.size()-1;i<j;i++,j--)
        {
            swap(res[i],res[j]);
        }//for
        return res;
    }
};
