/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        vector<vector<int>> seen;
        queue<TreeNode*> que;
        que.push(root);
        int level=0;
        
        while(!que.empty())
        {
            int n=que.size();
            for(int i=0;i<n;i++)
            {   
                if(seen.size()-1<level||seen.size()==0)
                {
                    seen.push_back({que.front()->val});
                }
                else
                {
                    seen[level].push_back(que.front()->val);
                } 
                TreeNode* cur=que.front();
                que.pop();
                if(cur!=nullptr&&cur->left!=nullptr)
                {
                    que.push(cur->left);
                }
                if(cur!=nullptr&&cur->right!=nullptr)
                {
                    que.push(cur->right);
                }              
            }//for i
            level++;           
        }//while
        
        return accumulate(seen[level-1].begin(),seen[level-1].end(),0);
        
    }
};
