/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

/*
// solution1:
class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> res;
        helper(root, res);
        return res;
    }
public: void helper(Node *root, vector<int>&res)
{
    if(root==nullptr)
    {
        return;
    }
    res.push_back(root->val);
    for (Node* child:root->children)
    {
        helper(child,res);
    }//for
}//helper
};
*/
/*
//solution2:
class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> res;
        stack<Node*> stack;
        if(root==nullptr)
        {
            return res;
        }
        stack.push(root);
        while(!stack.empty())
        {
            Node* cur = stack.top();
            res.push_back(cur->val);
            stack.pop();
            
            vector<Node*> child = cur->children;
            for (int i=child.size()-1; i>=0; i--)
            {
                stack.push(child[i]);
            }   



            
        }//while stack
        return res;
    }

};
*/
