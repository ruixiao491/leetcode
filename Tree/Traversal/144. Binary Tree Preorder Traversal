/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
/*
//solution1:
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        helper(root, res);
        return res;
        
    } 
public: void helper(TreeNode*root, vector<int>&res)
{
    if(root==nullptr)
    {
        return;
    }
    res.push_back(root->val);
    helper(root->left,res);
    helper(root->right,res);
}
    
};
*/
/*
//solution 2
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> stack;
        if(root==nullptr)
        {
            return res;
        }
        stack.emplace(root);
        while(!stack.empty())
        {
            TreeNode* cur;
            cur=stack.top();
            res.push_back(cur->val);
            stack.pop();
            if(cur->right!=nullptr)
            {
                stack.emplace(cur->right);
            }//if right
            if(cur->left!=nullptr)
            {
                stack.emplace(cur->left);
            }//if left
        
            
            
        }//while stack
        return res;
    }
    
};
*/
//solution 3
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        TreeNode* node=root;
        while(node!=nullptr)
        {
            if(node->left==nullptr)
            {
                res.push_back(node->val);
                node=node->right;
            }//if left
            else
            {
                TreeNode* predecessor=node->left;
                while((predecessor->right!=nullptr)&&(predecessor->right!=node))
                {
                    predecessor=predecessor->right;
                }//while predecessor
                if(predecessor->right==nullptr)
                {
                    res.push_back(node->val);
                    predecessor->right=node;
                    node=node->left;
                }//if predecessor right = null
                else
                {
                    predecessor->right=nullptr;
                    node=node->right;
                }//else
            }//else
        }//while node
        
        return res;
    }
};
