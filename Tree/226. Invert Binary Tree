//My solution
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==nullptr)
        {
            return root;
        }
        TreeNode* temp=root->right;
        root->right=invertTree(root->left);
        root->left=invertTree(temp);
        
        return root;
        
    }
};


##################################################
The solution in the solution part: similar to BFS
##################################################
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if(root==nullptr)
        {
            return root;
        }
        queue<TreeNode*> que;
        que.push(root);
        while(!que.empty())
        {
            TreeNode* cur=que.front();
            que.pop();
            TreeNode* temp=cur->left;
            cur->left=cur->right;
            cur->right=temp;
            if(cur->left!=nullptr)
            {
                que.push(cur->left);
            }
            if(cur->right!=nullptr)
            {
                que.push(cur->right);
            }
        }//while
        return root;
    }
};
