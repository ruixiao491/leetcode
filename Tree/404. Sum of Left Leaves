//My solution: recursive
class Solution {
public:
    int sumOfLeftLeaves(TreeNode* root) {
        if(root==nullptr) return 0;
        
        return subtreeresult(root,false);
        
    }
    int subtreeresult(TreeNode* sub, bool isLeft)
    {
        if(sub->left==nullptr&&sub->right==nullptr)
        {
            return isLeft ? sub->val:0;
        }//if
        int total=0;
        if(sub->left!=nullptr)
        {
            total+=subtreeresult(sub->left, true);
        }//if
        if(sub->right!=nullptr)
        {
            total+=subtreeresult(sub->right,false);
        }
        return total;
    }//subtreeresult
    
};


######################################
The solution in the solution part: BFS
######################################
class Solution {
public:
    bool isLeafNode(TreeNode* node) {
        return !node->left && !node->right;
    }

    int sumOfLeftLeaves(TreeNode* root) {
        if (!root) {
            return 0;
        }

        queue<TreeNode*> q;
        q.push(root);
        int ans = 0;
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if (node->left) {
                if (isLeafNode(node->left)) {
                    ans += node->left->val;
                }
                else {
                    q.push(node->left);
                }
            }
            if (node->right) {
                if (!isLeafNode(node->right)) {
                    q.push(node->right);
                }
            }
        }
        return ans;
    }
};


######################################
The solution in the solution part: DFS
######################################
class Solution {
public:
    bool isLeafNode(TreeNode* node) {
        return !node->left && !node->right;
    }

    int dfs(TreeNode* node) {
        int ans = 0;
        if (node->left) {
            ans += isLeafNode(node->left) ? node->left->val : dfs(node->left);
        }
        if (node->right && !isLeafNode(node->right)) {
            ans += dfs(node->right);
        }
        return ans;
    }

    int sumOfLeftLeaves(TreeNode* root) {
        return root ? dfs(root) : 0;
    }
};
