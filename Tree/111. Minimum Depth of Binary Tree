///BFS
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==nullptr)
        {
            return 0;
        }
        int ans=0;
        queue<pair<TreeNode*, int>> que;
        que.push({root,1});
        while(!que.empty())
        {
            auto it=que.front();
            que.pop();
            ans=it.second;
            if(it.first->left!=nullptr)
            {
                que.push({it.first->left,it.second+1});
            }
            if(it.first->right!=nullptr)
            {
                que.push({it.first->right,it.second+1});
            }
            
            if(it.first->left==nullptr&&it.first->right==nullptr)
            {
                //std::cout<<que.size()<<std::endl;
                break;
            }
        }//while
        return ans;
    }
};


#######################################
The solution in the solution part: DFS
#######################################
class Solution {
public:
    int minDepth(TreeNode *root) {
        if (root == nullptr) {
            return 0;
        }

        if (root->left == nullptr && root->right == nullptr) {
            return 1;
        }

        int min_depth = INT_MAX;
        if (root->left != nullptr) {
            min_depth = min(minDepth(root->left), min_depth);
        }
        if (root->right != nullptr) {
            min_depth = min(minDepth(root->right), min_depth);
        }

        return min_depth + 1;
    }
};

