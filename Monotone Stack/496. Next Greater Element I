//Brute Force
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        //std::cout<<nums1.size();
        vector<int> ans(nums1.size(),-1);
        for(int i=0;i<nums1.size();i++)
        {
            int index=-1;
            int index2=-1;
            for(int j=0;j<nums2.size();j++)
            {
                if(nums1[i]==nums2[j])
                {
                    //std::cout<<"test1:  "<<j<<std::endl;
                    index=j;
                    break;
                }
            }//for j
            //std::cout<<nums1[i]<<"  "<<index<<std::endl;
            for(int j=index;j<nums2.size();j++)
            {
                if(nums1[i]<nums2[j])
                {
                    index2=j;
                    
                    break;
                }
            }
            //std::cout<<"test2:   "<<index2<<std::endl;
            ans[i]= index2!=-1 ? nums2[index2]:-1;
            //std::cout<<ans[i]<<std::endl;
        }//for i
       return ans; 
        
    }
};

##########################
//Better Brute Force
##########################
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int>ans;
        unordered_map<int,int> seen_nums2;
        for(int i=0;i<nums2.size();i++)
        {
            //Both two ways work
            //seen_nums2.insert({nums2[i],i});
            seen_nums2[nums2[i]]=i;
            
        }
        for(int i=0;i<nums1.size();i++)
        {
            int index=seen_nums2[nums1[i]];
            int index2=-1;
            for(int j=index;j<nums2.size();j++)
            {
              if(nums2[j]>nums1[i])
              {
                 index2=j;
                  break;
              }
            }//for j
            int val= index2==-1 ? -1:nums2[index2];
            ans.push_back(val);
        }//for i
        return ans;
    }
};
*/
################
//using stack
################
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        //vector<int> ans(nums1.size(),-1);
        vector<int> ans;
        stack<int> stack;
        std::map<int, int> seen_nums2;
        
        for(int i=0;i<nums2.size();i++)
        {
            while(!stack.empty()&&nums2[i]>stack.top())
            {
                int value=stack.top();
                seen_nums2[value]=nums2[i];
                stack.pop();            
            }//while
            stack.push(nums2[i]);
            //std::cout<<"test:  "<<nums2[i]<<std::endl;
        }//for
        while(!stack.empty())
        {
            int value=stack.top();
            //std::cout<<"value:  "<<value<<std::endl;
            //seen_nums2.insert({value,-1});
            seen_nums2[value]=-1;
            stack.pop();
        }
        for(int i=0; i<nums1.size();i++)
        {
            //ans[i]=seen_nums2[nums1[i]];
            ans.push_back(seen_nums2[nums1[i]]);
        }
        
        return ans;
        
    }
};
