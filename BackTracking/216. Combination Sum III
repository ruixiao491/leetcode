####################################
All the solutions from solution part
####################################
 方法一：二进制（子集）枚举
 ######################
 class Solution {
public:
    vector<int> temp;
    vector<vector<int>> ans;

    bool check(int mask, int k, int n) {
        temp.clear();
        for (int i = 0; i < 9; ++i) {
            if ((1 << i) & mask) {
                temp.push_back(i + 1);
            }
        }
        return temp.size() == k && accumulate(temp.begin(), temp.end(), 0) == n; 
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        for (int mask = 0; mask < (1 << 9); ++mask) {
            if (check(mask, k, n)) {
                ans.emplace_back(temp);
            }
        }
        return ans;
    }
};

###################
Backtracking
###################
private:
    vector<vector<int>> ans;
    vector<int> path;
    void backtracking(int k, int n, int starIndex)
    {
        if (path.size() == k)
        {
            if (accumulate(path.begin(), path.end(), 0) == n)
            {
                ans.push_back(path); 
                //std::cout<<starIndex<<std::endl;
            }     
            return ;
        }
        if (accumulate(path.begin(), path.end(), 0) > n)
            return ;//剪枝 sum>n时剪枝
        for (int i = starIndex; i <= 9 - (k - path.size()) + 1; i++)//剪枝，
        {
            path.push_back(i);
            //std::cout<<"first push_back:  "<<i<<"   "<<path.size()<<std::endl;
            backtracking(k, n, i + 1);
            //std::cout<<"second path: "<<path.size()<<"   "<<i<<"   "<<path.back()<<std::endl;
            path.pop_back();
            //std::cout<<"after remove:  "<<path.back()<<std::endl;
        }
        std::cout<<"last out:  "<<starIndex<<" "<<path.back()<<"   "<<path.size()<<std::endl;
        return ;    
    }
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        backtracking(k, n, 1);
        return ans;
    }
};
