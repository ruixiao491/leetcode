///My solution: backtracking
class Solution {
public:
    vector<int> visit;
    vector<vector<int>> ans;
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        visit=vector<int>(n,0);
        vector<int> perm;
        backtrack(nums,0,n,perm);
        return ans;       
        
    }//permute
    void backtrack(vector<int>& nums,int start,int n, vector<int> perm)
    {
        if(start==n)
        {
           ans.push_back(perm); 
        }
        else
        {
            for(int i=0;i<n;i++)
            {
                if(visit[i]==1) continue;
                perm.push_back(nums[i]);
                visit[i]=1;
                backtrack(nums,start+1,n,perm);
                visit[i]=0;
                perm.pop_back();
            }//for
        }//else
    }//backtrack
};

###############################################################################
The solution in the solution part: backtracking with optimized space complexity
###############################################################################
class Solution {
public:
    void backtrack(vector<vector<int>>& res, vector<int>& output, int first, int len){
        // 所有数都填完了
        if (first == len) {
            res.emplace_back(output);
            return;
        }
        for (int i = first; i < len; ++i) {
            // 动态维护数组
            swap(output[i], output[first]);
            // 继续递归填下一个数
            backtrack(res, output, first + 1, len);
            // 撤销操作
            swap(output[i], output[first]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int> > res;
        backtrack(res, nums, 0, (int)nums.size());
        return res;
    }
};

