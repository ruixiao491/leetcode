///My solution after inspiration:
class Solution {
public:
    vector<int> visit;
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        vector<int> perm;
        visit=vector<int>(nums.size(),0);
        backtrack(nums,0,perm,ans);
        return ans;
        
        
    }//permuteUnique
    void backtrack(vector<int>& nums,int start,vector<int>& perm,vector<vector<int>>& ans)
    {
        if(start==nums.size())
        {
            ans.push_back(perm);
            return;
        }
        else
        {
            for(int i=0;i<nums.size();i++)
            {
                if((i>0&&nums[i]==nums[i-1]&&visit[i-1]==0)||visit[i]==1)
                {
                    continue;
                }
                perm.push_back(nums[i]);
                visit[i]=1;
                backtrack(nums,start+1,perm,ans);
                perm.pop_back();
                visit[i]=0;
            }//for
        }
    }//backtrack
};
