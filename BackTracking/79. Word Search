class Solution {
public:
    vector<vector<int>> dir={{1,0},{-1,0},{0,1},{0,-1}};
    vector<vector<int>> visited;
    int counts;
    bool exist(vector<vector<char>>& board, string word) {
        int m=board.size();
        int n=board[0].size();
        visited=vector(m,vector<int>(n,0));
        counts=word.size();
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(dfs(board,0,word,i,j)==1)
                {
                    return true;
                }
            }//for j
        }//for i
        return false;
              
    }
    bool dfs(vector<vector<char>>& board,int start,string word, int i, int j)
    {
        if(board[i][j]!=word[start])
        {
            return false;
        }
        else if(start==word.size()-1)
        {
            return true;
        }
        visited[i][j]=1;
        //std::cout<<i<<" "<<j<<std::endl;
        for(int k=0;k<4;k++)
        {
            int row=i+dir[k][0];
            int col=j+dir[k][1];
            if(row>=0&&row<board.size()&&col>=0&&col<board[0].size()&&visited[row][col]==0)
            {
                if(dfs(board,start+1,word,row,col)==1)
                {
                    return true;
                }
            }//if
        }//for k
        visited[i][j]=0;
        return false;
        
    }//dfs
};
