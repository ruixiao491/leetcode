######################################################
Inspired by other's java code (build gcd function)
######################################################
class Solution {
public:
    string gcd(string a, string b)
    {
        if(b=="")
        {
            return a;
        }
        else
        {
            while(a.find(b)==0)
            {
                a.erase(0,b.size());
            }//while
            return gcd(b,a);
        }//else
    }
    string gcdOfStrings(string str1, string str2) {
        if(str1+str2!=str2+str1) return "";
        return gcd(str1,str2);
            
    }
};



#####################################################
The solution in the solution part: math
#####################################################
class Solution {
public:
    string gcdOfStrings(string str1, string str2) {
        if (str1 + str2 != str2 + str1) return "";
        return str1.substr(0, std::gcd((int)str1.length(), (int)str2.length())); 
    }
};


#####################################################
The solution in the solution part: Count
#####################################################
class Solution {
    bool check(string t,string s){
        int lenx = (int)s.length() / (int)t.length();
        string ans = "";
        for (int i = 1; i <= lenx; ++i){
            ans = ans + t;
        }
        return ans == s;
    }
public:
    string gcdOfStrings(string str1, string str2) {
        int len1 = (int)str1.length(), len2 = (int)str2.length();
        for (int i = min(len1, len2); i >= 1; --i){ // 从长度大的开始枚举
            if (len1 % i == 0 && len2 % i == 0){
                string X = str1.substr(0, i);
                if (check(X, str1) && check(X, str2)) return X;
            }
        }
        return "";
    }
};


##################################################################
The solution in the solution part: Count (optimized the above one)
##################################################################
class Solution {
    bool check(string t,string s){
        int lenx = (int)s.length() / (int)t.length();
        string ans = "";
        for (int i = 1; i <= lenx; ++i){
            ans = ans + t;
        }
        return ans == s;
    }
public:
    string gcdOfStrings(string str1, string str2) {
        int len1 = (int)str1.length(), len2 = (int)str2.length();
        string T = str1.substr(0, __gcd(len1,len2)); // __gcd() 为c++自带的求最大公约数的函数
        if (check(T, str1) && check(T, str2)) return T;
        return "";
    }
};


