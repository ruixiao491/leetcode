//My solution:
class Solution {
public:
    string shortestCompletingWord(string licensePlate, vector<string>& words) {
        map<char,int> seen;
        for(int i=0;i<licensePlate.size();i++)
        {
            if(isalpha(licensePlate[i]))
            {
                seen[tolower(licensePlate[i])]++;
            }//if
        }//for i
        string ans="aaaaaaaaaaaaaaa";
        for(int i=0;i<words.size();i++)
        {
            map<char,int> check;
            for(int j=0;j<words[i].size();j++)
            {
                check[words[i][j]]++;
            }
            auto it=seen.begin();
            int next=0;
            while(it!=seen.end())
            {
                if(check.find(it->first)==check.end())
                {
                    next=1;
                    break;
                }
                else
                {
                    auto it2=check.find(it->first);
                    if(it2->second<it->second)
                    {
                        next=1;
                        break;
                    }
                }
                it++;
            }//while
            if(next==1)
            {
                continue;
            }
            else
            {
                if(words[i].size()<ans.size())
                {
                    ans=words[i];
                }
            }
        }//for
        return ans;
    }
};


################################################
The solution in the solution part: quite similar
################################################
class Solution {
public:
    string shortestCompletingWord(string licensePlate, vector<string> &words) {
        array<int, 26> cnt{};
        for (char ch : licensePlate) {
            if (isalpha(ch)) {
                ++cnt[tolower(ch) - 'a'];
            }
        }
        int idx = -1;
        for (int i = 0; i < words.size(); ++i) {
            array<int, 26> c{};
            for (char ch : words[i]) {
                ++c[ch - 'a'];
            }
            bool ok = true;
            for (int j = 0; j < 26; ++j) {
                if (c[j] < cnt[j]) {
                    ok = false;
                    break;
                }
            }
            if (ok && (idx < 0 || words[i].length() < words[idx].length())) {
                idx = i;
            }
        }
        return words[idx];
    }
};

