///My solution
class Solution {
public:
    int myAtoi(string s) {
        int n=s.size();
        int ans;
        int start=0;
        int sign=-1;
        while(start<n)
        {
            if(isspace(s[start])==0)
            {
                break;
            }
            start++;
        }//while
        if(s[start]=='+'||s[start]=='-')
        {
            if(s[start]=='-')
            {
                sign=1;
            }//if
            start++;
        }
        if(isdigit(s[start]))
        {
            ans=-(s[start]-'0');
            start++;
        }
        else
        {
            return 0;
        }
        for(int i=start;i<n;i++)
        {
            if(isdigit(s[i])==0)
            {
                break;       
            }//if
            if(ans<(INT_MIN+s[i]-'0')/10)
            {
                ans=INT_MIN;
                break;
            }
            else
            {
                ans=ans*10-(s[i]-'0');
                //std::cout<<ans<<std::endl;
            }
        }//for
        
        if(ans==INT_MIN&&sign==-1)
        {
            return INT_MAX;
        }
        else
        {
            return sign*ans;
        }
            
    }
};

############################################
The solution in the solution part: automaton
############################################

class Automaton {
    string state = "start";
    unordered_map<string, vector<string>> table = {
        {"start", {"start", "signed", "in_number", "end"}},
        {"signed", {"end", "end", "in_number", "end"}},
        {"in_number", {"end", "end", "in_number", "end"}},
        {"end", {"end", "end", "end", "end"}}
    };

    int get_col(char c) 
    {
        if (isspace(c)) return 0;
        if (c == '+' or c == '-') return 1;
        if (isdigit(c)) return 2;
        return 3;
    }//get_col
public:
    int sign = 1;
    long long ans = 0;
    void get(char c) 
    {
        state = table[state][get_col(c)];
        //std::cout<<state<<std::endl;
        if (state == "in_number") 
        {
            ans = ans * 10 + c - '0';
            ans = sign == 1 ? min(ans, (long long)INT_MAX) : min(ans, -(long long)INT_MIN);
        }
        else if (state == "signed")
            sign = c == '+' ? 1 : -1;
    }// void get
};//class automaton

class Solution {
public:
    int myAtoi(string str) {
        Automaton automaton;
        for (char c : str)
            automaton.get(c);
        return automaton.sign * automaton.ans;
    }
};
